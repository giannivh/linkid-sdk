<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book lang="en">
	<bookinfo>
		<title>OLAS SDK Manual</title>
		<copyright>
			<year>2007</year>
			<holder>LIN-K N.V.</holder>
		</copyright>
		<date>16/10/2007</date>
		<abstract>
			<para>
				This document contains the SDK manual for the OLAS
				product.
			</para>
		</abstract>
		<releaseinfo>1.0.0</releaseinfo>
		<productname>OLAS</productname>
		<productnumber>1.0.0</productnumber>
		<authorgroup>
			<author>
				<firstname>Frank</firstname>
				<surname>Cornelis</surname>
			</author>
		</authorgroup>
	</bookinfo>

	<chapter id="introduction">
		<title>Introduction</title>
		<abstract>
			<para>
				This chapter will bring a short overview of the services
				offered by OLAS.
			</para>
		</abstract>
		<para>
			OLAS is an authentication, signature and user data exchange
			service. It allows 3th party web applications to
			authenticate users, involve users in transactions and obtain
			user identity data. It brings to users a central identity
			management.
		</para>
		<para>
			OLAS offers several services to applications:
			<orderedlist>
				<listitem>
					<para>
						Authentication service: if an application calls
						this service the user is authenticated by OLAS
						using one of his configured devices. Upon
						success the application is informed and can
						grant access to the user.
					</para>
				</listitem>
				<listitem>
					<para>
						Attribute service: an application can query the
						user’s attributes and use their values in its
						business processes. Attributes can only be read
						if the user has given explicit permission to do
						so.
					</para>
				</listitem>
				<listitem>
					<para>
						Data service: an application can push attributes
						to the user’s profile. These attributes could
						then be used by other applications (if allowed
						by the user and the providing application).
					</para>
				</listitem>
				<listitem>
					<para>
						Name Identifier Mapping service: via this
						service an application can perform a mapping
						from a username to the user identifier. Of
						course this service is only available for an
						application after explicit authorization has
						been given by the operator.
					</para>
				</listitem>
				<listitem>
					<para>
						Security Token Service: via this service an
						application can validate an authentication token
						that has been received from the authentication
						web application.
					</para>
				</listitem>
			</orderedlist>
			The SafeOnline SDK contains Java components to ease the
			communication with the OLAS services. Besides client
			components for these web service you'll also find various
			components in this SDK to ease integration of the SafeOnline
			authentication mechanism within servlet container based web
			applications.
		</para>
		<section>
			<title>Concepts</title>
			<para>
				Some key concepts will be elaborated on to provide a
				good understanding of the different SDK components.
				<variablelist>
					<varlistentry>
						<term>Application</term>
						<listitem>
							<para>
								The entity that invokes operations on
								the OLAS web services and OLAS
								authentication web application. Every
								application is trusted by the OLAS
								services via an X509 certificate and
								corresponding private key.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Operator</term>
						<listitem>
							<para>
								The entity that manages the OLAS
								services and defines the trust
								relationship and access control towards
								applications.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Application Owner</term>
						<listitem>
							<para>
								Every application is owned by an
								application owner. The application owner
								can manage its application via the OLAS
								application owner web application.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				The SDK itself is bundled in the file
				<code>safe-online-sdk-1.0.jar</code>
				. All the other JAR files are required dependencies. As
				web service software stack we're using the Sun JAX-WS
				2.1 RI.
			</para>
		</section>
		<section>
			<title>Attributes</title>
			<para>
				Every subject (i.e. user) has different attributes. An
				attribute is composed of a name and a value. For
				example: the attribute with name 'Age' has value '18'.
				Different types of attributes are possible. We define
				the following attribute categories:
			</para>
			<section>
				<title>Single-valued Attributes</title>
				<para>
					A single-valued attribute is, as the name suggests,
					an attribute with only one single value attached to
					it. This value of the attribute is of a certain
					type. Supported types are:
					<itemizedlist>
						<listitem>
							<para>String</para>
						</listitem>
						<listitem>
							<para>Boolean</para>
						</listitem>
						<listitem>
							<para>Integer</para>
						</listitem>
						<listitem>
							<para>Double</para>
						</listitem>
						<listitem>
							<para>Date</para>
						</listitem>
					</itemizedlist>
					An example of a single-valued attribute is 'Age'
					with value '18'.
				</para>
			</section>
			<section>
				<title>Multi-valued Attributes</title>
				<para>
					A multi-valued attribute is an attribute where the
					attribute value is a collection of primitive values.
					An example is the 'GSM' attribute with values '1234'
					and '5678'.
				</para>
			</section>
			<section>
				<title>Compounded Attributes</title>
				<para>
					A compounded attribute is an attribute that is
					composed of other attributes. These other attributes
					are called the member attributes of the compounded
					attribute. A compounded attribute only really makes
					sense if the member attributes are multi-valued. The
					following picture highlights the principal behind
					compounded attributes.
					<mediaobject>
						<imageobject>
							<imagedata format="SVG"
								fileref="compounded-attribute.svg" scale="50" scalefit="1" />
						</imageobject>
						<caption>The attribute matrix.</caption>
					</mediaobject>
					The operator can define new attribute types within
					the OLAS system. Every subject can have values for
					these attributes. A multi-valued attribute is simply
					a grouping of attribute values over the horizontal
					axis. A compounded attribute is defined as a
					grouping of attribute values over the vertical axis.
				</para>
			</section>
		</section>
		<section>
			<title>Application Identity</title>
			<para>
				Every application can define its own application
				identity. An application identity is a set of attribute
				types over which the application wants access for a
				given subscribed subject. The application identity is
				managed by the OLAS operator and has a version which
				allows it to evolve over time. Before a user can log in
				into an application, he has to confirm usage of the
				attributes as defined in the current application
				identity.
			</para>
			<para>
				The SDK provides a unique way of defining an identity
				card in Java 5 that matches the application identity as
				defined within the OLAS service. An example of this is
				given below.
				<programlisting>
<![CDATA[
@IdentityCard
public static class MyIdentityCard {
	private String name;
	private MyCompounded[] compoundedAttribute;
	
	@IdentityAttribute("compounded-attribute")
	public MyCompounded[] getCompoundAttribute() {
		return this.compoundAttribute;
	}
	
	public void setCompoundAttribute(MyCompounded[] compoundAttribute) {
		this.compoundAttribute = compoundAttribute;
	}
	
	@IdentityAttribute("name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
			this.name = name;
	}
}

@Compound("compounded-attribute")
public static class MyCompounded {
	private String member0;

	private String member1;

	@CompoundMember("member1")
	public String getMember0() {
		return this.member0;
	}

	public void setMember0(String member0) {
		this.member0 = member0;
	}

	@CompoundMember("member2")
	public String getMember1() {
		return this.member1;
	}

	public void setMember1(String member1) {
		this.member1 = member1;
	}
}
]]>
				</programlisting>
			</para>
			<para>
				Thus a developer can define identity cards as classes in
				Java 5 that correspond with the OLAS application
				identity. These classes will be recognized by the
				different SDK component for retrieving attribute values.
			</para>
		</section>
	</chapter>

	<chapter id="ws">
		<title>Web Services</title>
		<abstract>
			<para>
				This chapter describes the web services that OLAS offers
				towards applications. We're also demonstrating how to
				use the SDK client components to invoke operations on
				the different web services.
			</para>
		</abstract>
		<para>
			A web service definition is composed out of a WSDL and a set
			of XSD files. For every web service you'll find the web
			service definition files in the file:
			<code>safe-online-xxx-ws-1.0.jar</code>
			. This file also contains the JAX-WS 2.1 stub classes and
			the corresponding JAXB 2 annotated Java classes for XML
			binding.
		</para>
		<para>
			Every OLAS web service is secured via server-side SSL and a
			client-side WS-Security signature on the SOAP message body.
			The WS-Security signature is according to OASIS Web Services
			Security: SOAP Message Security 1.0 Standard 200401, March
			2004.
		</para>
		<para>
			The request SOAP messages are to be signed with the X509v3
			application certificate. The certificate must be attached as
			<code>BinarySecurityToken</code>
			within the
			<code>Security</code>
			SOAP header element according to 6.3 Binary Security Tokens.
			The WS-Security SOAP header should also contain a
			<code>Timestamp</code>
			according to section 10 - Security Timestamps of the OASIS
			WS-Security 1.0 specification. The WS-Security signature
			should sign both the SOAP body and the WS-Security
			<code>Timestamp</code>
			element. The
			<code>KeyInfo</code>
			XML Digital Signature element should contain a corresponding
			<code>SecurityTokenReference</code>
			according to 7.2 - Direct References.
		</para>
		<para>
			An example SOAP message with WS-Security header is given in
			the following example (we removed the namespace declaration attributes for readability).
			<programlisting>
<![CDATA[
<soap:Envelope>
	<soap:Header>
		<wsse:Security soap:mustUnderstand="1">
			<wsse:BinarySecurityToken
				EncodingType="http://docs.oasis-open.org/...#Base64Binary"
				ValueType="http://docs.oasis-open.org/...#X509v3"
				wsu:Id="the-cert">
				...
			</wsse:BinarySecurityToken>
			<ds:Signature>
				<ds:SignedInfo>
					<ds:CanonicalizationMethod
						Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
					<ds:SignatureMethod
						Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
					<ds:Reference URI="#the-body">
						<ds:Transforms>
							<ds:Transform
								Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
						</ds:Transforms>
						<ds:DigestMethod
							Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
						<ds:DigestValue>...</ds:DigestValue>
					</ds:Reference>
					<ds:Reference URI="#the-timestamp">
						<ds:Transforms>
							<ds:Transform
								Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
						</ds:Transforms>
						<ds:DigestMethod
							Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
						<ds:DigestValue>...</ds:DigestValue>
					</ds:Reference>
				</ds:SignedInfo>
				<ds:SignatureValue>
					...
				</ds:SignatureValue>
				<ds:KeyInfo>
					<wsse:SecurityTokenReference>
						<wsse:Reference URI="#the-cert" 
							ValueType="http://docs.oasis-open.org/...#X509v3"/>
					</wsse:SecurityTokenReference>
				</ds:KeyInfo>
			</ds:Signature>
			<wsu:Timestamp
				wsu:Id="the-timestamp">
				<wsu:Created>2007-01-01T00:00:00.000Z</wsu:Created>
			</wsu:Timestamp>
		</wss:Security>
	</soap:Header>
	<soap:Body wsu:Id="the-body">
		...
	</soap:Body>
</soap:Envelope>
]]>
			</programlisting>
		</para>
		<para>
			The response SOAP messages will contain an unsigned
			<code>Timestamp</code>
			WS-Security SOAP header. This was done for compatibility
			with .NET.
		</para>
		<para>
			Basically every web service comes with a corresponding SDK
			client component. These client components will take care of
			the correct creation of the WS-Security signatures. For
			example, the Name Identifier Mapping web service can be
			accessed via the
			<code>NameIdentifierMappingClient</code>
			SDK component. Every web service client component has a main
			constructor that requires the following parameters:
			<variablelist>
				<varlistentry>
					<term>location</term>
					<listitem>
						<para>
							The location of the OLAS web service. This
							is composed out of
							<code>host:port</code>
							information.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>certificate</term>
					<listitem>
						<para>
							The client X509 certificate that will be
							used during the creation of the WS-Security
							signature.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>private key</term>
					<listitem>
						<para>
							The private key that corresponds with the
							client X509 certificate. This key will be
							used for creating the WS-Security signature.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			The exact operations exposed by the different SDK web
			service client components can be found within the Javadoc
			documentation that comes with the SDK package.
		</para>
	</chapter>

	<chapter id="auth-webapp">
		<title>Authentication Web Application</title>
		<abstract>
			<para>
				This chapter will give an overview of the functionality
				provided by the OLAS authentication web application.
			</para>
		</abstract>
		<para>
			The OLAS authentication web application is used to
			authentication users via a web interface. In more detail the
			OLAS authentication web application allows you to:
			<itemizedlist>
				<listitem>
					<para>
						Register new users. A new user is also required
						to directly register an initial authentication
						device.
					</para>
				</listitem>
				<listitem>
					<para>
						Authenticate existing users via a device
						required by the requesting application.
					</para>
				</listitem>
				<listitem>
					<para>
						Register new authentication devices if an
						application requires to do so.
					</para>
				</listitem>
				<listitem>
					<para>
						Subscribe a user to an application if he hasn't
						done that yet.
					</para>
				</listitem>
				<listitem>
					<para>
						Let the user confirm the usage of the identity
						attributes required by the requesting
						application.
					</para>
				</listitem>
				<listitem>
					<para>
						Let the user fill in missing identity attributes
						as required by the requesting application.
					</para>
				</listitem>
				<listitem>
					<para>
						Generate an authentication token according to
						the authentication protocol used by the
						requesting application.
					</para>
				</listitem>
			</itemizedlist>
			The OLAS authentication web application supports different
			authentication protocol that can be used by the applications
			to initiate a new user authentication process. The most
			important authentication protocol is the SAML version 2.0
			Browser POST profile.
		</para>
		<para>
			There are different ways of initiating a new user
			authentication process from within an application, depending
			on the type of application. We can make a distinction
			between the following two types of web applications:
			<orderedlist>
				<listitem>
					<para>
						Web resource based web applications like
						servlet-based or JSP web application. This type
						of web application will probably use a servlet
						filter to initiate the user authentication
						process when the user wants to access a certain
						web page that requires authentication.
					</para>
				</listitem>
				<listitem>
					<para>
						MVC based web application. For example: JSF/Seam
						based web application. This type of web
						application will probably directly initiate the
						authentication process via an explicit user
						action like pressing a login button on a form.
					</para>
				</listitem>
			</orderedlist>
			For both type of web application the OLAS SDK offers utility
			classes to initiate and of course also finalize a user
			authentication process.
		</para>
		<section>
			<title>Authentication Filter</title>
			<para>
				When you decide to handle the authentication process
				invocation via servlet filters you can use the following
				SDK servlet filter components:
				<variablelist>
					<varlistentry>
						<term>
							<code>AuthenticationFilter</code>
						</term>
						<listitem>
							<para>
								This filter can be used to initiate the
								authentication process.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<code>LoginFilter</code>
						</term>
						<listitem>
							<para>
								This filter can be used to finalize an
								authentication process.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				Both of these servlet filters should be configured via
				the
				<code>web.xml</code>
				servlet web application deployment descriptor.
				Configuration parameters of these filters are described
				within the Javadoc API documentation of the OLAS SDK.
				Below you'll find an example of how to configure the
				OLAS SDK filters to secure a certain section of a web
				application.
				<programlisting>
<![CDATA[
<filter>
	<filter-name>AuthenticationFilter</filter-name>
	<filter-class>
		net.link.safeonline.sdk.auth.filter.AuthenticationFilter
	</filter-class>
	<init-param>
		<param-name>SafeOnlineAuthenticationServiceUrl</param-name>
		<param-value>
			https://olas.lin-k.net/olas-auth/
		</param-value>
	</init-param>
	<init-param>
		<param-name>ApplicationName</param-name>
		<param-value>demo-application</param-value>
	</init-param>
	<init-param>
		<param-name>AuthenticationProtocol</param-name>
		<param-value>SAML2_BROWSER_POST</param-value>
	</init-param>
	<init-param>
		<param-name>KeyStoreType</param-name>
		<param-value>pkcs12</param-value>
	</init-param>
	<init-param>
		<param-name>KeyStoreFile</param-name>
		<param-value>/etc/pki/demo-app.p12</param-value>
	</init-param>
	<init-param>
		<param-name>KeyStorePassword</param-name>
		<param-value>secret</param-value>
	</init-param>
</filter>

<filter>
	<filter-name>LoginFilter</filter-name>
	<filter-class>
		net.link.safeonline.sdk.auth.filter.LoginFilter
	</filter-class>
</filter>

<filter-mapping>
	<filter-name>LoginFilter</filter-name>
	<url-pattern>/secure/*</url-pattern>
</filter-mapping>

<filter-mapping>
	<filter-name>AuthenticationFilter</filter-name>
	<url-pattern>/secure/*</url-pattern>
</filter-mapping>
]]>
				</programlisting>
			</para>
		</section>
		<section>
			<title>Direct application-level initiation</title>
			<para>
				Direct invocation of the authentication protocol handler
				is also possible. An example of this is given by
				<code>SafeOnlineLoginUtils</code>
				that can be used on Seam/JSF-based web applications.
				Notice that in this case the usage of the
				<code>LoginFilter</code>
				is still required to be able to process the
				authentication response as received from the OLAS
				authentication web application.
			</para>
		</section>
	</chapter>
</book>