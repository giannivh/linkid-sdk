<?xml version="1.0" encoding="UTF-8"?>
<!-- vi:set ts=4 sw=4 noexpandtab: -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en">
	<bookinfo>
		<title>OLAS OSGi Attribute Plugin Manual</title>
		<copyright>
			<year>2008</year>
			<holder>LIN-K N.V.</holder>
		</copyright>
		<date>22/08/2008</date>
		<abstract>
			<para> This document contains information regarding the OSGi
				Attribute Plugin functionality and integration in the OLAS product.
			</para>
		</abstract>
		<releaseinfo>1.0.0</releaseinfo>
		<productname>OLAS</productname>
		<productnumber>1.0.0</productnumber>
	</bookinfo>
	<chapter id="introduction">
		<title>Introduction</title>
		<para> OLAS has 2 types of attributes: OLAS attributes and external
			attributes. OLAS attributes are attributes provided by OLAS nodes.
			These also include attributes provided by OLAS authentication
			devices. External attributes are attributes which are provided to
			OLAS from the outside. To achieve the latter type of attributes, OLAS
			provides an OSGi attribute plugin service API which can be
			implemented to create specific OSGi attribute plugin bundles. In the
			same way OLAS provides a service API to OSGi bundles so they can
			retrieve attributes from OLAS. As OSGi R4 implementation OLAS is
			using
			an embedded instance of Apache Felix.</para>
		<para>During the creation of an attribute type in the operator
			webapp of the OLAS product, the operator can configure an attribute
			type to be external and select a plugin from the available list of
			OSGi plugins implementing the plugin service. There is also a
			possibility to add some additional configuration for each attribute
			type.</para>
	</chapter>
	<chapter id="services">
		<title>Service API</title>
		<para>
			OSGi attribute plugins are standalone OSGi bundles. For more
			information on how OSGi bundles work and should be implemented,
			here are some interesting links:
			<orderedlist>
				<listitem>http://www.osgi.org/About/Technology</listitem>
				<listitem>http://www.knopflerfish.org/osgi_service_tutorial.html</listitem>
				<listitem>http://felix.apache.org/site/apache-felix-osgi-tutorial.html</listitem>
				<listitem>http://www.theserverside.com/tt/articles/article.tss?l=OSGiforBeginners</listitem>
			</orderedlist>
		</para>
		<section>
			<title>Plugin Attribute Service API</title>
			<para>
				To create a new OSGi attribute plugin bundle, you need to implement
				the interface
				<code>PluginAttributeService</code>
				. This interface has one method:
				<code>Object getAttribute(String userId, String
					attributeName,
					String configuration)</code>
				. The configuration string is optional for each external attribute
				type configured in OLAS. This method has as return type of Object.
				This can be a String, Integer, Boolean, Double, Date or a List of
				these types. Also a List of type
				<code><![CDATA[
					Map<String , Object>
				]]></code>
				representing compound attributes.
			</para>
			<section>
				<title>Single-valued</title>
				<para>
					For single-valued attributes, plugins should return the value
					of the
					requested attribute as String, Integer, Boolean, Double or
					Date.
				</para>
			</section>
			<section>
				<title>Multi-valued</title>
				<para>
					For multi-valued attributes, plugins should return a List of
					value objects, of type String, Integer, Boolean, Double or Date.
				</para>
			</section>
			<section>
				<title>Compound</title>
				<para>
					For compound attributes, plugins should return a List of
					<code><![CDATA[Map<String,Object]]></code>
					. Each map representing one compound attribute.
					The map's key will
					be the member's attribute name.
				</para>
			</section>
		</section>
		<section>
			<title>OLAS Attribute Service API</title>
			<para>
				To allow attribute plugins to retrieve OLAS attributes, OLAS
				provides an implementation of the
				<code>OlasAttributeService</code>
				interface. This interface has one method:
				<code>getAttribute(String userId, String
					attributeName)</code>
				. The OLAS attribute service can be used from within an attribute
				OSGi plugin by first fetching the OSGi
				<code>ServiceReference</code>
				for this interface. Then retrieving the service implementation.
				<programlisting>
				ServiceReference serviceReference =
					bundleContext.getServiceReference(
						OlasAttributeService.class.getName());
				OlasAttributeService attributeService = 
					(OlasAttributeService) bundleContext.
						getService(serviceReference);
				return attributeService.getAttribute(userId, attributeName);	
				</programlisting>
			</para>
		</section>
		<section>
			<title>OLAS Log Service API</title>
			<para>
				To allow attribute plugins to use the OLAS logging facilities
				OLAS
				offers a log service. This is an implementation of the
				<code>LogService</code>
				as defined in the OSGi Compendium.
				<programlisting>
				ServiceReference serviceReference =
					bundleContext.getServiceReference(
						LogService.class.getName());
				LogService logService = 
					(LogService) bundleContext.
						getService(serviceReference);
				logService.log(LogService.INFO,"message");
				</programlisting>
			</para>
		</section>
	</chapter>
	<chapter id="SSL">
		<title>SSL</title>
		<para>
			If you want to setup an SSL connection in the OSGi plugin there is
			one caveat. You cannot set the
			<code>HttpsUrlConnection.setDefaultSSLSocketFactory
			</code>
			for this as this will break OLAS's SSL connections.
		</para>
	</chapter>
</book>
