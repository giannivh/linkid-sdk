<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en">
	<bookinfo>
		<title>OLAS Device SDK Manual</title>
		<copyright>
			<year>2008</year>
			<holder>LIN-K N.V.</holder>
		</copyright>
		<date>21/02/2008</date>
		<abstract>
			<para> This document contains the Device SDK manual for the OLAS
				product.</para>
		</abstract>
		<releaseinfo>1.0.0</releaseinfo>
		<productname>OLAS</productname>
		<productnumber>1.0.0</productnumber>
		<authorgroup>
			<author>
				<firstname>Wim</firstname>
				<surname>Vandenhaute</surname>
			</author>
		</authorgroup>
	</bookinfo>
	<chapter id="introduction">
		<title>Introduction</title>
		<abstract>
			<para> This chapter will give a brief overview on how to become an
				OLAS authentication device provider. Information on the necessary
				setup will be explained.</para>
		</abstract>
		<para> All communication for the services provided by the remote OLAS
			authentication device provider will be done according to the OASIS
			SAML version 2.0 Web SSO profile with HTTP POST binding.</para>
		<para>
			Following services can be provided by the device provider :
			<itemizedlist>
				<listitem>
					Authentication
				</listitem>
				<listitem>
					Registration
				</listitem>
				<listitem>
					Removal
				</listitem>
				<listitem>
					Updating
				</listitem>
			</itemizedlist>
		</para>
		<para> Below the protocol is shown as is used for authentication of an
			OLAS device by a remote device provider.</para>
		<para>
			Below the protocol is shown as is used for registration, removal and
			updating of an OLAS device issued by a remote device provider.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" align="center" scale="55"
						fileref="remotedeviceinteraction.png" />
				</imageobject>
				<caption>Remote device interaction</caption>
			</mediaobject>
		</para>
		<para> The OLAS Device SDK contains Java components to ease the setup
			of an OLAS device provider by a remote device provider.</para>
	</chapter>
	<chapter id="authentication">
		<title>Device Authentication</title>
		<abstract>
			<para> This chapter will give an overview of the setup needed to
				integrate an authentication service from the remote device provider
				towards OLAS.</para>
		</abstract>
		<para> Following 2 servlets are provided by the device SDK to handle
			the incoming SAML request token and send out a SAML response
			containing the ID of the authenticated user.</para>
		<para>
			<variablelist>
				<varlistentry>
					<term>
						<code>auth.LandingServlet</code>
					</term>
					<listitem>
						<para> This servlet should be used to handle the incoming SAML
							request.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>auth.ExitServlet</code>
					</term>
					<listitem>
						<para> This servlet should be used to send out a SAML response for
							this authentication session.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			The context parameter
			<code>AuthenticationUrl</code>
			will be used by the
			<code>LandingServlet</code>
			to redirect to after it has handled the SAML authentication request
			token. Both of these servlets and associated context parameters
			should be configured via the
			<code>web.xml</code>
			servlet web application deployment descriptor. The
			<code>DeviceName</code>
			should match the device name configured in OLAS. Below you find an
			example of such a configuration.
		</para>
		<para>
			Both servlets have an optional error page init parameter. In case of
			an error, these servlets will put the error message on the
			HttpSession as the session attribute
			<code>ErrorMessage</code>
			. With this
			<code>ErrorPage</code>
			parameter you specify a custom error page showing this
			<code>ErrorMessage</code>
			.
		</para>
		<programlisting><![CDATA[<context-param>
		<param-name>KeyStoreType</param-name>
		<param-value>jks</param-value>
	</context-param>
	
	<context-param>
		<param-name>KeyStoreFile</param-name> 
  		<param-value>/etc/pki/demo-app.p12</param-value>
  	</context-param> 

	<context-param>
		<param-name>KeyStorePassword</param-name>
		<param-value>secret</param-value>
	</context-param>

	<context-param>
		<param-name>DeviceName</param-name>
		<param-value>devicename</param-value>
	</context-param>

	<context-param>
		<param-name>StsWsLocation</param-name>
		<param-value>https://olas.host.name:8443</param-value
	</context-param>

	<servlet>
		<servlet-name>LandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.auth.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>AuthenticationUrl</param-name>
			<param-value>authentication.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.seam</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>LandingServlet</servlet-name>
		<url-pattern>/auth</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>ExitServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.auth.servlet.ExitServlet
		</servlet-class>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.seam</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>ExitServlet</servlet-name>
		<url-pattern>/authenticationexit</url-pattern>
	</servlet-mapping>]]></programlisting>
		<para>
			After the
			<code>LandingServlet</code>
			has handled the incoming SAML authentication request, 2 session
			attributes will be available.
			<itemizedlist>
				<listitem>
					<code>applicationId</code>
					: The machine readable application name.
				</listitem>
				<listitem>
					<code>applicationName</code>
					: The human readable application name.
				</listitem>
			</itemizedlist>
			Also a partially filled in
			<code>AuthenticationContext</code>
			will be pushed on the session containing both attributes.
		</para>
		<para>
			Upon successful authentication, this
			<code>AuthenticationContext</code>
			should be filled in containing the authentication details such as :
			<itemizedlist>
				<listitem>
					User ID
				</listitem>
				<listitem>
					Used Device Name
				</listitem>
				<listitem>
					SAML Response Token Validity Time
				</listitem>
				<listitem>
					Device Provider Name
				</listitem>
			</itemizedlist>
			The following class should be used to accomplish this :
			<code>AuthenticationContext.java</code>
			. After handling of the incoming SAML request by the
			<code>LandingServlet</code>
			, an instance of this class will be initialized on the HttpSession.
		</para>
		<para>
			When you are setting up your device webapp behind a proxy, an extra
			init parameter named
			<code>ServletEndpointUrl</code>
			is needed for the
			<code>LandingServlet</code>
			. If not specified, the SAML request will be rejected as the
			receiving endpoint ( behind the proxy ) will not match the endpoint
			specified in the SAML request. When this is the case your
			configuration for the LandingServlet should look something like :
			<programlisting>
			<![CDATA[	
	<servlet>
		<servlet-name>LandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.auth.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>AuthenticationUrl</param-name>
			<param-value>authentication.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ServletEndpointUrl</param-name>
			<param-value>
				https://device.webapp/device/auth 
			</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.seam</param-value>
		</init-param>
	</servlet>	
			]]>
			</programlisting>
		</para>
		<para>
			To finalize the authentication process, redirect to the
			<code>ExitServlet</code>
			's URL to return to OLAS. If the
			<code>userId</code>
			or
			<code>usedDevice</code>
			are not set, when redirecting to the exit servlet, a SAML response
			containing
			<code>Authentication Failed</code>
			will be sent to OLAS. If only the
			<code>usedDevice</code>
			is set, a SAML response containing
			<code>Unknown Principal</code>
			will be sent to OLAS, causing the OLAS authentication webapp to
			redirect to the
			<code>all-devices</code>
			page. If both are set, a SAML response containing the right
			assertions will be sent.
		</para>
	</chapter>
	<chapter id="operation">
		<title>Device Registration / Removal / Updating</title>
		<abstract>
			<para> This chapter will give an overview of the setup needed to
				integrate a registration, removal and updating service from the
				remote device provider towards OLAS.</para>
		</abstract>
		<para> Following 2 servlets are provided by the device SDK to handle
			an incoming SAML request from OLAS and send out a SAML response to
			OLAS. The incoming SAML request will containing the request device
			operation, being REGISTER, REMOVE or UPDATE.</para>
		<para>
			<variablelist>
				<varlistentry>
					<term>
						<code>LandingServlet</code>
					</term>
					<listitem>
						<para> This servlet should be used to handle the incoming SAML
							request token from OLAS. This servlet will redirect to the
							configured device operation URL's accordingly..</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>ExitServlet</code>
					</term>
					<listitem>
						<para> This servlet should be used to send out a SAML response
							token to OLAS containing the final status of the device
							operation.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			The
			<code>LandingServlet</code>
			can contain following 3 optional init parameters, representing the
			target URL's for each device operation REGISTER, REMOVE and UPDATE
			being respectively
			<code>RegistrationUrl</code>
			,
			<code>RemovalUrl</code>
			and
			<code>UpdateUrl</code>
			. If one of these parameters are not specified, and still a request
			for this operation is returned, the servlet will return a SAML
			response containing a
			<code>Operation not supported</code>
			status.
		</para>
		<para>
			When the landing servlet has finished handling the incoming SAML
			request, an instance of the class
			<code>ProtocolContext</code>
			will be initialized on the HttpSession. This will contain the user ID
			of the subject who is performing the requested device operation. This
			is the ID that should be returned during authentication to OLAS. It
			will also contain the device we want to perform a device operation on
			as well as the operation.
		</para>
		<para>
			Two session parameters will also be pushed on the HttpSession, namely
			<code>userId</code>
			and
			<code>operation</code>
			.
		</para>
		<para>
			When the device operation has finished, failed or has to be aborted,
			redirect to the
			<code>ExitServlet</code>
			to finalize the device operation and send back a corresponding SAML
			token to OLAS. Before redirecting to this servlet, first specify the
			validity of the SAML response token by filling the
			<code>validity</code>
			field of the
			<code>ProtocolContext</code>
			. To specify a successful device operation simply set the
			<code>success</code>
			field of
			<code>ProtocolContext</code>
			to
			<code>true</code>
			.
		</para>
		<para>
			Both servlets have an optional error page init parameter. In case of
			an error, these servlets will put the error message on the
			HttpSession as the session attribute
			<code>ErrorMessage</code>
			. With this
			<code>ErrorPage</code>
			parameter you specify a custom error page showing this
			<code>ErrorMessage</code>
			.
		</para>
		<para>
			Both of these servlets and associated context parameters should be
			configured via the
			<code>web.xml</code>
			servlet web application deployment descriptor. Below you find an
			example of such a configuration.
		</para>
		<programlisting><![CDATA[<context-param>
		<param-name>KeyStoreType</param-name>
		<param-value>jks</param-value>
	</context-param>
	
	<context-param>
		<param-name>KeyStoreFile</param-name> 
  		<param-value>/etc/pki/demo-app.p12</param-value>
  	</context-param> 

	<context-param>
		<param-name>KeyStorePassword</param-name>
		<param-value>secret</param-value>
	</context-param>

	<context-param>
		<param-name>StsWsLocation</param-name>
		<param-value>https://olas.host.name:8443</param-value
	</context-param>
	
	<servlet>
		<servlet-name>DeviceLandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>RegistrationUrl</param-name>
			<param-value>register-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>RemovalUrl</param-name>
			<param-value>remove-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>UpdateUrl</param-name>
			<param-value>update-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.seam</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>DeviceLandingServlet</servlet-name>
		<url-pattern>/device</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>DeviceExitServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.servlet.ExitServlet
		</servlet-class>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.seam</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>DeviceExitServlet</servlet-name>
		<url-pattern>/deviceexit</url-pattern>
	</servlet-mapping>]]></programlisting>
		<para>
			When you are setting up your device webapp behind a proxy, an extra
			init parameter named
			<code>ServletEndpointUrl</code>
			is needed for the
			<code>LandingServlet</code>
			. If not specified, the SAML request will be rejected as the
			receiving endpoint ( behind the proxy ) will not match the endpoint
			specified in the SAML request. When this is the case your
			configuration for the LandingServlet should look something like :
		</para>
		<programlisting>
			<![CDATA[
	<servlet>
		<servlet-name>DeviceLandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>RegistrationUrl</param-name>
			<param-value>register-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>RemovalUrl</param-name>
			<param-value>remove-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>UpdateUrl</param-name>
			<param-value>update-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ServletEndpointUrl</param-name>
			<param-value>
				https://device.webapp/device/auth 
			</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.seam</param-value>
		</init-param>
	</servlet>
			]]>
		</programlisting>
	</chapter>
</book>
