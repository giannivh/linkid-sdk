<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en">
	<bookinfo>
		<title>OLAS Device SDK Manual</title>
		<copyright>
			<year>2008</year>
			<holder>LIN-K N.V.</holder>
		</copyright>
		<date>21/02/2008</date>
		<abstract>
			<para> This document contains the Device SDK manual for the OLAS
				product.</para>
		</abstract>
		<releaseinfo>1.0.0</releaseinfo>
		<productname>OLAS</productname>
		<productnumber>1.0.0</productnumber>
		<authorgroup>
			<author>
				<firstname>Wim</firstname>
				<surname>Vandenhaute</surname>
			</author>
		</authorgroup>
	</bookinfo>
	<chapter id="introduction">
		<title>Introduction</title>
		<abstract>
			<para> This chapter will give a brief overview on how to become an
				OLAS authentication device provider. Information on the necessary
				setup will be explained.</para>
		</abstract>
		<para> Authentication by the remote OLAS device provider will be done
			according to the OASIS SAML version 2.0 Web SSO profile with HTTP
			POST binding. Or it can be done by using web services. All other
			device operations provided by the device provider are according to a
			custom extension to the OASIS SAML version 2.0 RequestAbstractType
			and StatusResponseType. The HTTP POST binding is used for this.
		</para>
		<para>
			Following services can be provided by the device provider :
			<itemizedlist>
				<listitem>
					Authentication
				</listitem>
				<listitem>
					Registration
				</listitem>
				<listitem>
					Removal
				</listitem>
				<listitem>
					Updating
				</listitem>
				<listitem>
					Disabling
				</listitem>
				<listitem>
					Enabling
				</listitem>
			</itemizedlist>
		</para>
		<para>
			Below the protocol is shown as is used for registration and
			authentication of an OLAS device by a remote device provider. The
			removal, updating, disabling and enabling of a device follows the
			same
			protocol as with registration.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" align="center" scale="55"
						fileref="remotedeviceinteraction.png" />
				</imageobject>
				<caption>Remote device interaction</caption>
			</mediaobject>
		</para>
		<para> The OLAS Device SDK contains Java components to ease the setup
			of an OLAS device provider by a remote device provider.</para>
	</chapter>
	<chapter id="authentication">
		<title>Device Authentication</title>
		<abstract>
			<para> This chapter will give an overview of the setup needed to
				integrate an authentication service from the remote device provider
				towards OLAS.</para>
		</abstract>
		<para> Following 2 servlets are provided by the device SDK to handle
			the incoming SAML request token and send out a SAML response
			containing the ID of the authenticated user.</para>
		<para>
			<variablelist>
				<varlistentry>
					<term>
						<code>auth.servlet.LandingServlet
						</code>
					</term>
					<listitem>
						<para> This servlet should be used to handle the incoming SAML
							request.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>auth.servlet.ExitServlet</code>
					</term>
					<listitem>
						<para> This servlet should be used to send out a SAML response for
							this authentication session.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			The init parameter
			<code>AuthenticationUrl</code>
			will be used by the
			<code>LandingServlet</code>
			to redirect to after it has handled the SAML authentication request
			token. Both of these servlets and associated context parameters
			should be configured via the
			<code>web.xml</code>
			servlet web application deployment descriptor. The
			<code>DeviceName</code>
			should match the device name configured in OLAS. Below you find an
			example of such a configuration.
		</para>
		<para>
			Both servlets have an optional error page init parameter. In case of
			an error, these servlets will put the error message on the
			HttpSession as the session attribute
			<code>ErrorMessage</code>
			. With this
			<code>ErrorPage</code>
			parameter you specify a custom error page showing this
			<code>ErrorMessage</code>
			.
		</para>
		<programlisting><![CDATA[<context-param>
		<param-name>KeyStoreType</param-name>
		<param-value>jks</param-value>
	</context-param>
	
	<context-param>
		<param-name>KeyStoreFile</param-name> 
  		<param-value>/etc/pki/demo-app.p12</param-value>
  	</context-param> 

	<context-param>
		<param-name>KeyStorePassword</param-name>
		<param-value>secret</param-value>
	</context-param>

	<context-param>
		<param-name>DeviceName</param-name>
		<param-value>devicename</param-value>
	</context-param>

	<context-param>
		<param-name>WsLocation</param-name>
		<param-value>https://olas.host.name:8443</param-value
	</context-param>

	<servlet>
		<servlet-name>LandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.auth.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>AuthenticationUrl</param-name>
			<param-value>authentication.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.jsf</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>LandingServlet</servlet-name>
		<url-pattern>/auth</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>ExitServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.auth.servlet.ExitServlet
		</servlet-class>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.jsf</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>ExitServlet</servlet-name>
		<url-pattern>/authenticationexit</url-pattern>
	</servlet-mapping>]]></programlisting>
		<para>
			After the
			<code>LandingServlet</code>
			has handled the incoming SAML authentication request, 2 session
			attributes will be available.
			<itemizedlist>
				<listitem>
					<code>applicationId</code>
					: The machine readable application name.
				</listitem>
				<listitem>
					<code>applicationName</code>
					: The human readable application name.
				</listitem>
			</itemizedlist>
			Also a partially filled in
			<code>AuthenticationContext</code>
			will be pushed on the session containing both attributes.
		</para>
		<para>
			Upon successful authentication, this
			<code>AuthenticationContext</code>
			should be filled in containing the authentication details such as :
			<itemizedlist>
				<listitem>
					User ID
				</listitem>
				<listitem>
					Used Device Name
				</listitem>
				<listitem>
					SAML Response Token Validity Time
				</listitem>
				<listitem>
					Device Provider Name
				</listitem>
			</itemizedlist>
			The following class should be used to accomplish this :
			<code>AuthenticationContext.java</code>
			. After handling of the incoming SAML request by the
			<code>LandingServlet</code>
			, an instance of this class will be initialized on the HttpSession.
		</para>
		<para>
			When you are setting up your device webapp behind a proxy, an extra
			init parameter named
			<code>ServletEndpointUrl</code>
			is needed for the
			<code>LandingServlet</code>
			. If not specified, the SAML request will be rejected as the
			receiving endpoint ( behind the proxy ) will not match the endpoint
			specified in the SAML request. When this is the case your
			configuration for the LandingServlet should look something like :
			<programlisting>
			<![CDATA[	
	<servlet>
		<servlet-name>LandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.auth.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>AuthenticationUrl</param-name>
			<param-value>authentication.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ServletEndpointUrl</param-name>
			<param-value>
				https://device.webapp/device/auth 
			</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.jsf</param-value>
		</init-param>
	</servlet>	
			]]>
			</programlisting>
		</para>
		<para>
			To finalize the authentication process, redirect to the
			<code>ExitServlet</code>
			's URL to return to OLAS. If the
			<code>userId</code>
			or
			<code>usedDevice</code>
			are not set, when redirecting to the exit servlet, a SAML response
			containing
			<code>Authentication Failed</code>
			will be sent to OLAS. If only the
			<code>usedDevice</code>
			is set, a SAML response containing
			<code>Unknown Principal</code>
			will be sent to OLAS, causing the OLAS authentication webapp to
			redirect to the
			<code>all-devices</code>
			page. If both are set, a SAML response containing the right
			assertions will be sent.
		</para>
	</chapter>
	<chapter id="operation">
		<title>Device Registration / Removal / Updating / Disabling /
			Enabling</title>
		<abstract>
			<para> This chapter will give an overview of the setup needed to
				integrate a registration, removal, updating and disabling/enabling
				service from the remote device provider towards OLAS.</para>
		</abstract>
		<para> Following 2 servlets are provided by the device SDK to handle
			an incoming OLAS Device Operation request and send out an OLAS Device
			Operation response to OLAS. The incoming request will contain the
			requested device operation, being REGISTER, NEW_ACCOUNT_REGISTER,
			REMOVE, UPDATE, DISABLE or ENABLE. The device operation
			NEW_ACCOUNT_REGISTER
			is used in case a new OLAS user is registrating
			his initial device.
		</para>
		<para>
			<variablelist>
				<varlistentry>
					<term>
						<code>servlet.LandingServlet</code>
					</term>
					<listitem>
						<para> This servlet should be used to handle the incoming SAML
							request token from OLAS. This servlet will redirect to the
							configured device operation URL's accordingly..</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>servlet.ExitServlet</code>
					</term>
					<listitem>
						<para> This servlet should be used to send out a SAML response
							token to OLAS containing the final status of the device
							operation.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			The
			<code>LandingServlet</code>
			can contain following 3 optional init parameters, representing the
			target URL's for each device operation REGISTER ( or
			NEW_ACCOUNT_REGISTER ), REMOVE, UPDATE, DISABLE and ENABLE being
			respectively
			<code>RegistrationUrl</code>
			,
			<code>RemovalUrl</code>
			,
			<code>UpdateUrl</code>
			,
			<code>DisableUrl</code>
			and
			<code>EnableUrl</code>
			. If one of these parameters are not specified, and still a request
			for this operation is returned, the servlet will return a response
			containing an
			<code>Operation not supported</code>
			status.
		</para>
		<para>
			When the landing servlet has finished handling the incoming request,
			an instance of the class
			<code>ProtocolContext</code>
			will be initialized on the HttpSession. This will contain the user ID
			of the subject who is performing the requested device operation. This
			is the ID that should be returned during authentication to OLAS. It
			will also contain the device we want to perform a device operation on
			as well as the operation. Optionally it can contain the device the
			user has used to authenticated itself towards OLAS before issuing the
			device operation. This will not be the case when the device operation
			is NEW_ACCOUNT_REGISTER as it will be the OLAS user's initial device
			that is being registrated. Optionally the request can also contain an
			attribute string. This string represents the user attribute related
			to a specific device registration.
		</para>
		<para>
			Following session parameters will also be pushed on the HttpSession,
			namely
			<code>userId</code>
			,
			<code>operation</code>
			,
			<code>authenticatedDevice</code>
			and
			<code>attribute</code>
			.
		</para>
		<para>
			When the device operation has finished, failed or has to be aborted,
			redirect to the
			<code>ExitServlet</code>
			to finalize the device operation and send back a corresponding SAML
			token to OLAS. Before redirecting to this servlet, first specify the
			validity of the SAML response token by filling the
			<code>validity</code>
			field of the
			<code>ProtocolContext</code>
			. To specify a successful device operation simply set the
			<code>success</code>
			field of
			<code>ProtocolContext</code>
			to
			<code>true</code>
			.
		</para>
		<para>
			Both servlets have an optional error page init parameter. In case of
			an error, these servlets will put the error message on the
			HttpSession as the session attribute
			<code>ErrorMessage</code>
			. With this
			<code>ErrorPage</code>
			parameter you specify a custom error page showing this
			<code>ErrorMessage</code>
			.
		</para>
		<para>
			Both of these servlets and associated context parameters should be
			configured via the
			<code>web.xml</code>
			servlet web application deployment descriptor. Below you find an
			example of such a configuration.
		</para>
		<programlisting><![CDATA[<context-param>
		<param-name>KeyStoreType</param-name>
		<param-value>jks</param-value>
	</context-param>
	
	<context-param>
		<param-name>KeyStoreFile</param-name> 
  		<param-value>/etc/pki/demo-app.p12</param-value>
  	</context-param> 

	<context-param>
		<param-name>KeyStorePassword</param-name>
		<param-value>secret</param-value>
	</context-param>

	<context-param>
		<param-name>WsLocation</param-name>
		<param-value>https://olas.host.name:8443</param-value
	</context-param>
	
	<servlet>
		<servlet-name>DeviceLandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>RegistrationUrl</param-name>
			<param-value>register-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>RemovalUrl</param-name>
			<param-value>remove-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>UpdateUrl</param-name>
			<param-value>update-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>DisableUrl</param-name>
			<param-value>disable-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>EnableUrl</param-name>
			<param-value>enable-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.jsf</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>DeviceLandingServlet</servlet-name>
		<url-pattern>/device</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>DeviceExitServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.servlet.ExitServlet
		</servlet-class>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.jsf</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>DeviceExitServlet</servlet-name>
		<url-pattern>/deviceexit</url-pattern>
	</servlet-mapping>]]></programlisting>
		<para>
			When you are setting up your device webapp behind a proxy, an extra
			init parameter named
			<code>ServletEndpointUrl</code>
			is needed for the
			<code>LandingServlet</code>
			. If not specified, the SAML request will be rejected as the
			receiving endpoint ( behind the proxy ) will not match the endpoint
			specified in the SAML request. When this is the case your
			configuration for the LandingServlet should look something like :
		</para>
		<programlisting>
			<![CDATA[
	<servlet>
		<servlet-name>DeviceLandingServlet</servlet-name>
		<servlet-class>
			net.link.safeonline.device.sdk.servlet.LandingServlet
		</servlet-class>
		<init-param>
			<param-name>RegistrationUrl</param-name>
			<param-value>register-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>RemovalUrl</param-name>
			<param-value>remove-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>UpdateUrl</param-name>
			<param-value>update-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>DisableUrl</param-name>
			<param-value>disable-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>EnableUrl</param-name>
			<param-value>Enable-device.jsf</param-value>
		</init-param>
		<init-param>
			<param-name>ServletEndpointUrl</param-name>
			<param-value>
				https://device.webapp/device/auth 
			</param-value>
		</init-param>
		<init-param>
			<param-name>ErrorPage</param-name>
			<param-value>protocol-error.jsf</param-value>
		</init-param>
	</servlet>
			]]>
		</programlisting>
	</chapter>
	<chapter id="ws_authentication">
		<title>Web Service Authentication</title>
		<abstract>
			<para> OLAS also provides possibility to authenticate using a web
				service. This chapter will give an overview of the setup needed for
				this.
			</para>
		</abstract>
		<para>
			OLAS web service authentication requires the web service to be
			stateful. This because most devices require multiple steps to
			complete the authentication process. ( Like requesting an OTP to be
			generated and sent over ). Therefore the OLAS device authentication
			wsdl contains 2 ports, one that will return a stateful instance of
			the other port which will perform the actual authentication process.
		</para>
		<para>
			When OLAS receives a web service authentication request, it will
			lookup the requested device's authentication web service location.
			Initially OLAS will request a stateful instance of this device's
			stateful authentication web service. When successful, OLAS will proxy
			the authentication request to this stateful instance. The device
			authentication web service will then start the authentication
			process.
		</para>
		<para>
			For example an OTP will be generated and sent to the specified
			user's
			device. A response will be sent to the OLAS authentication web
			service notifying this step has completed and OLAS will proxy this
			response to the client application. When receiving the OTP, the user
			will submit this to OLAS and OLAS will proxy this again to the same
			stateful device authentication web service instance. Which will in
			turn complete the authentication process and return the userId of the
			authenticated user to OLAS. On receiving the userId, OLAS will
			generate a SAML v2.0 Assertion and return this to the client
			application. If the initial authentication request contained a public
			key, the assertion will contain this public key and a signature on
			this public key, signed by OLAS. This assertion can then be used
			using the
			<code>SAML v2.0 token profile with holder-of-key subject
				confirmation</code>
			. If no public key was specified, the assertion will not contain a
			signature and can be used using the
			<code>SAML v2.0 token profile with sender-vouches subject
				confirmation</code>
			.
		</para>
		<para>
			In following listing you can see the schema of the
			authentication request message sent to the device authentication web
			service and the response to be sent back.
		</para>
		<programlisting>
		<![CDATA[
	<element name="WSAuthenticationRequest"
		type="tns:WSAuthenticationRequestType" />
	<complexType name="WSAuthenticationRequestType">
		<complexContent>
			<extension base="samlp:RequestAbstractType">
				<sequence>
					<element ref="tns:DeviceCredentials" minOccurs="0"
						maxOccurs="1" />
					<element ref="ds:KeyInfo" minOccurs="0" maxOccurs="1" />
				</sequence>
				<attribute name="ApplicationId" type="string" use="required" />
				<attribute name="DeviceName" type="string" use="required" />
				<attribute name="Language" type="string" use="required" />
			</extension>
		</complexContent>
	</complexType>

	<element name="DeviceCredentials"
		type="tns:DeviceCredentialsType" />
	<complexType name="DeviceCredentialsType">
		<sequence>
			<element name="NameValueMap" ref="tns:NameValuePair"
				minOccurs="0" maxOccurs="unbounded" />
			<any namespace="##other" processContents="lax" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<element name="NameValuePair" type="tns:NameValuePairType" />
	<complexType name="NameValuePairType">
		<attribute name="Name" type="string" use="required" />
		<attribute name="Value" type="string" use="required" />
	</complexType>

	<element name="WSAuthenticationResponse" 
		type="tns:WSAuthenticationResponseType" />
	<complexType name="WSAuthenticationResponseType">
		<complexContent>
			<extension base="samlp:StatusResponseType">
				<sequence>
					<element ref="tns:DeviceAuthenticationInformation"
						minOccurs="0" maxOccurs="1" />
					<element name="assertions" ref="saml:Assertion" minOccurs="0"
						maxOccurs="unbounded" />
				</sequence>
				<attribute name="DeviceName" type="string" />
				<attribute name="UserId" type="string" />
				<attribute name="AuthenticationStep" type="string" />
			</extension>
		</complexContent>
	</complexType>

	<element name="DeviceAuthenticationInformation"
		type="tns:DeviceAuthenticationInformationType" />
	<complexType name="DeviceAuthenticationInformationType">
		<sequence>
			<element name="NameValuePairList" ref="tns:NameValuePair"
				minOccurs="0" maxOccurs="unbounded" />
			<any namespace="##other" processContents="lax" maxOccurs="unbounded" />
		</sequence>
	</complexType>
		]]>
		</programlisting>
		<para>
			The authentication request message is an extension of the SAML
			v2.0 RequestAbstractType. Additionally it contains optional device
			credentials, optional public key and required application ID, device
			name and language. The device credentials contains a list of
			name-value pairs or an arbitrary XML element. 
		</para>
		<para>
			The authentication response message is an extension of the SAML
			v2.0
			StatusResponseType. Additionally it contains optional device
			authentication information, SAML v2.0 assertion, device name, user ID
			and authentication step. The assertion and authentication step are
			filled in by OLAS and can be ignored by the device provider. The
			device authentication information contains a list of name-value pairs
			or an arbitrary XML element.
			If the device authentication consists of
			multiple steps, this field can be used to provide necessary
			information to the client application. Upon successful
			authentication, the user ID should be filled in and status set to
			successful.
		</para>
		<para>
			A list of available status codes is shown below.
			<itemizedlist>
				<listitem>
					urn:oasis:names:tc:SAML:2.0:status:Success
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:AuthenticationFailed
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:DeviceDisabled
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:InsufficientCredentials
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:InvalidCredentials
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:InternalError
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:PermissionDenied
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:RequestDenied
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:RequestFailed
				</listitem>
				<listitem>
					urn:net:lin-k:safe-online:ws:auth:status:SubjectNotFound
				</listitem>
			</itemizedlist>
		</para>
		<para>
			A utility class is available to generate an authentication response
			or set the appropriate status:
			<code>DeviceAuthenticationPortUtil</code>
		</para>
		<para>
			The device authentication web service should be secured via
			server-side SSL and a client-side WS-Security signature on the
			SOAP
			message body. The WS-Security signature is according to OASIS Web
			Services Security: SOAP
			Message Security 1.0 Standard 200401, March
			2004. 
		</para>
		<para>
			The request SOAP messages are to be signed with the X509v3
			application
			certificate. The certificate must
			be attached as
			BinarySecurityToken within the Security SOAP header
			element according
			to 6.3
			Binary Security Tokens. The WS-Security SOAP header should also
			contain a
			Timestamp according to
			section 10 - Security Timestamps of
			the OASIS WS-Security 1.0 specification.
			The WS-Security signature
			should sign both the SOAP body and the WS-Security Timestamp element.
			The
			KeyInfo XML Digital
			Signature element should contain a
			corresponding SecurityTokenReference
			according to 7.2 -
			Direct
			References. 
		</para>
		<para>
			To accomplish this following set of SOAP handlers should be set on
			the web service.
			<programlisting>
				<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<jws:handler-chains xmlns:jws="http://java.sun.com/xml/ns/javaee">
	<jws:handler-chain>
		<jws:handler>
			<jws:handler-class>
				net.link.safeonline.ws.util.LoginHandler
			</jws:handler-class>
		</jws:handler>
		<jws:handler>
			<jws:handler-class>
				net.link.safeonline.sdk.ws.WSSecurityBodyHandler
			</jws:handler-class>
		</jws:handler>
		<jws:handler>
			<jws:handler-class>
				net.link.safeonline.ws.util.CertificateMapperHandler
			</jws:handler-class>
		</jws:handler>
		<jws:handler>
			<jws:handler-class>
				net.link.safeonline.ws.util.CertificateValidatorHandler
			</jws:handler-class>
		</jws:handler>
		<jws:handler>
			<jws:handler-class>
				net.link.safeonline.sdk.ws.WSSecurityServerHandler
			</jws:handler-class>
		</jws:handler>
	</jws:handler-chain>
</jws:handler-chains>
				]]>
			</programlisting>

		</para>
	</chapter>
</book>