/*
 * SafeOnline project.
 *
 * Copyright 2006-2007 Lin.k N.V. All rights reserved.
 * Lin.k N.V. proprietary/confidential. Use is subject to license terms.
 */

package net.link.safeonline.user;

import java.io.IOException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.link.safeonline.authentication.exception.SafeOnlineException;
import net.link.safeonline.authentication.service.DeviceOperationService;
import net.link.safeonline.common.SafeOnlineConfig;
import net.link.safeonline.data.AttributeDO;
import net.link.safeonline.device.sdk.manage.saml2.DeviceOperationType;
import net.link.safeonline.sdk.auth.saml2.RequestUtil;
import net.link.safeonline.util.ee.EjbUtils;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public abstract class DeviceOperationUtils {

    private static final Log   LOG                                      = LogFactory.getLog(DeviceOperationUtils.class);

    /**
     * PATH within olas-user that the device should redirect back to after having completed the device operation. <i>[required]</i>
     */
    public static final String DEVICE_SERVICE_PATH_INIT_PARAM           = "DeviceServicePath";

    public static final String SAML2_POST_BINDING_VM_RESOURCE           = "/net/link/safeonline/device/sdk/saml2/binding/saml2-post-binding.vm";

    public static final String SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM = "Saml2BrowserPostTemplate";


    /**
     * <p>
     * <b>Note: ONLY use this method from the JSF framework.</b>
     * </p>
     * 
     * @see #redirect(HttpServletRequest, HttpServletResponse, String, DeviceOperationType, String, String, String, String, AttributeDO)
     */
    public static String redirect(String landingUrl, DeviceOperationType deviceOperation, String device, String authenticatedDevice,
                                  String userId, String id, AttributeDO attribute) {

        FacesContext context = FacesContext.getCurrentInstance();

        try {
            ExternalContext externalContext = context.getExternalContext();

            redirect((HttpServletRequest) externalContext.getRequest(), (HttpServletResponse) externalContext.getResponse(), landingUrl,
                    deviceOperation, device, authenticatedDevice, userId, id, attribute);

            return null;
        }

        finally {
            // Signal the JavaServer Faces implementation that the HTTP response for this request has already been generated.
            // The JFS request lifecycle should be terminated as soon as the current phase is completed.
            context.responseComplete();
        }
    }

    /**
     * <p>
     * <b>Note: This is a general purpose method that should work for any web application framework.</b>
     * </p>
     * 
     * Redirects the user webapp to the external device landing page using the SAML browser post protocol. The SAML authentication request
     * is generated by the device operation service associated with this HTTP session.
     * 
     * <p>
     * An optional initialization parameter <code>Saml2BrowserPostTemplate</code> can be defined in web.xml, specifying a custom SAML2
     * browser post velocity template.
     * </p>
     * 
     * 
     * @param landingUrl
     *            the location at the remote device issuer where to post the authentication request to
     * @param device
     * @param userId
     *            the OLAS user ID.
     * @param id
     *            the device compound attribute UUID
     */
    public static void redirect(HttpServletRequest request, HttpServletResponse response, String landingUrl,
                                DeviceOperationType deviceOperation, String device, String authenticatedDevice, String userId, String id,
                                AttributeDO attribute) {

        SafeOnlineConfig safeOnlineConfig = SafeOnlineConfig.load(request);
        String serviceUrl = safeOnlineConfig.absoluteUrlFromParam(request, DEVICE_SERVICE_PATH_INIT_PARAM);

        LOG.debug("redirecting to: " + landingUrl);

        String templateResourceName = request.getSession().getServletContext().getInitParameter(SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM);
        if (templateResourceName == null) {
            templateResourceName = SAML2_POST_BINDING_VM_RESOURCE;
        }

        /*
         * Next is required to preserve the session if the browser does not support cookies.
         */
        String encodedLandingUrl = response.encodeRedirectURL(landingUrl);
        LOG.debug("landing url: " + encodedLandingUrl);

        DeviceOperationService deviceOperationService = (DeviceOperationService) request.getSession().getAttribute(
                DeviceOperationService.DEVICE_OPERATION_SERVICE_ATTRIBUTE);
        if (null != deviceOperationService) {
            deviceOperationService.abort();
        }
        deviceOperationService = EjbUtils.getEJB(DeviceOperationService.JNDI_BINDING, DeviceOperationService.class);
        request.getSession().setAttribute(DeviceOperationService.DEVICE_OPERATION_SERVICE_ATTRIBUTE, deviceOperationService);

        String encodedSamlRequestToken;
        try {
            encodedSamlRequestToken = deviceOperationService.redirect(serviceUrl, encodedLandingUrl, deviceOperation, device,
                    authenticatedDevice, userId, id, attribute);
        } catch (SafeOnlineException e) {
            throw new RuntimeException("could not initiate device operation: " + e.getMessage(), e);
        }

        try {
            RequestUtil.sendRequest(encodedLandingUrl, encodedSamlRequestToken, request.getLocale(), null, false, templateResourceName,
                    response, true);
        } catch (ServletException e) {
            throw new RuntimeException("could not initiate device operation: " + e.getMessage(), e);
        } catch (IOException e) {
            throw new RuntimeException("could not initiate device operation: " + e.getMessage(), e);
        }
    }
}
