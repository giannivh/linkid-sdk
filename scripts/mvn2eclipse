#!/bin/bash
# __________________________________________________________________________ #
#																			 #
#		Mvn2Eclipse -- Prepare Maven2 Artifacts for use in Eclipse.			 #
#																			 #
#																			 #
#	Licensed under the Apache License, Version 2.0 (the "License");			 #
#	you may not use this file except in compliance with the License.		 #
#	You may obtain a copy of the License at									 #
#																			 #
#		http://www.apache.org/licenses/LICENSE-2.0							 #
#																			 #
#	Unless required by applicable law or agreed to in writing, software		 #
#	distributed under the License is distributed on an "AS IS" BASIS,		 #
#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#	See the License for the specific language governing permissions and		 #
#	limitations under the License.											 #
# __________________________________________________________________________ #
#																			 #
#																			 #
# Copyright 2007, lhunath													 #
#	* http://lhunath.lyndir.com												 #
#	* Maarten Billemont.													 #
#																			 #
source "${0%/*}/bashlib"													 #
shopt -s nullglob
#cd "${0%/*}/.."


# Setup and parse arguments.
noMaven=
offline=
for arg in $(getArgs hoMs "$@"); do
	case $arg in
		h) showHelp \
			'Maven To Eclipse' \
			"Generate the Build Path for Eclipse projects from their Maven dependency configuration." \
			'lhunath' \
			\
			'-M' "Don't run maven, just apply eclipse classpath fixes on existing eclipse configuration." \
			'-o' "Run maven in offline mode; preventing it from checking for remote artifacts or javadoc/sources."
            '-s' "Tell maven to make an attempt to download Javadoc and Source artifacts for dependencies."

			exit		;;
		M) noMaven=1	;;
		o) offline=1	;;
		s) source=1	;;
	esac
done


# Run the maven2 eclipse plugin.
if (( ! noMaven )); then
	mvn ${offline:+-o} ${source:+-DdownloadJavadocs=true -DdownloadSources=true} eclipse:eclipse \
		|| report "Maven eclipse plugin failed." || exit
fi


# Convert any JAR references of projects into source references.
emit "Converting JAR dependencies on safe-online projects to source dependencies" --
	echo +"ejb-clients" > "$spinPipe"

	cps=(.[c]lasspath */.classpath)
	for cp in "${cps[@]}"; do
		ed -s "$cp" &>/dev/null <<-END
			H
			g/--1.jar/d
			v/-client/\
			s/kind="[^"]*" path=".*\/safe-online\/\([^\/]*\).*"/kind="src" path="\/\1"/
			wq
		END
	done

	for pp in .[c]lasspath "${cps[@]}"; do
		[[ $pp = */* ]] \
			&& echo +"${pp%/*}" > "$spinPipe" \
			|| echo +"${PWD##*/}" > "$spinPipe"

		IFS=$'\n' srcs=($(grep -F 'kind="src"' "$pp" | cut -d'"' -f4)); unset IFS
		while read -r; do
			line=$REPLY

			if [[ $line = *'-client'* ]]; then
				curSrc=$(sed 's,"[^"]*/safe-online/\([^/]*\)/.*,"/\1,' <<< "$line")
				for src in "${srcs[@]}"; do
					[[ $src = $curSrc ]] && continue 2
				done

				line=$(sed '/\/safe-online\// { s,"[^"]*/safe-online/\([^/]*\)/[^"]*,"/\1,; s/kind="[^"]*"/kind="src"/; }' <<< "$line")
			fi

			echo "$line"
		done <<< "$(<"$pp")" > "$pp~"
		mv -f "$pp~" "$pp"
	done

emit -$?


# Setup project-specific configurations such as Formatter, Clean-up, Compiler Errors and Warnings, etc.
emit "Setting up project-specific configurations" --

	result=0
	for p in .[s]ettings */.settings; do
		[[ $pp = */* ]] \
			&& echo +"${p%/*}" > "$spinPipe" \
			|| echo +"${PWD##*/}" > "$spinPipe"

		cp "${0%/*}"/org.eclipse.jdt.* "$p/" \
			|| { result=$?; break; }

		# Special configuration for projects with generated sources.
		[[ -e $p/../target/generated-sources ]] && {
			for f in "${0%/*}"/ws~org.eclipse.*; do
				cp "$f" "$p/${f#*'ws~'}" || { result=$?; break 2; }
			done
		}
	done

emit -$result
