#!/bin/bash
source "${0%/*}"/bashlib

[[ $1 = -R ]] && { reverse=1; shift; }
[[ $1 = -a ]] && { apply=1; shift; }

base="${2:-${0%/*}/..}"
distribution=$1

shift 2
(( $# )) && \
    webapps=("$@") || \
    webapps=( SafeOnline dodentocht )
(( ! ${#repos[@]} )) && {
    repos=()
    for webapp in "${webapps[@]}"; do
        repos+=( "$PWD/${0%/*}/../../$webapp" )
    done
}

[[ ! $distribution ]] && {
    distribution=$(cd "$base/safe-online-base-distribution/target/"*"/jboss/server/default/deploy/../../../../"; echo "$PWD")
}
base="$base/work"

[[ ! -d $distribution/jboss/server/default/tmp ]] && {
    emit -r "Invalid distribution path or distribution not deployed: '$distribution'"
    exit 1
}

[[ -x $(type -P readlink 2>/dev/null) ]] && {
    base=$(readlink -m "$base")
    distribution=$(readlink -m "$distribution")
}

[[ $base = /* ]] || base="$PWD/$base"

function extractCss {
    css=( *'/css/style.css' )

    [[ -e $css ]] && \
    mkdir -p "$base/$webapp/css"                    || return
    (( reverse )) || {
        mv "$css" "$base/$webapp/css/" && \
        cp "$base/$webapp/css/${css##*/}"{,~}       || return
    }

    for file in "${css[@]}"; do
        ln -f "$base/$webapp/css/style.css" "$file" && \
        touch "$file"                               || return
    done
}

function extractHtml {
    while read file; do
        mkdir -p "$base/$webapp/${file%/*}"         || return
        (( reverse )) || {
            mv "$file" "$base/$webapp/$file" && \
            cp "$base/$webapp/$file"{,~}            || return
        }

        [[ -e "$base/$webapp/$file" ]] && \
            { ln -f "$base/$webapp/$file" "$file"   || return; }
        touch "$file"                               || return
    done < <(find . -name '*.xhtml')
}

function extractStuff {

        extractCss && \
        extractHtml
}

if (( apply )); then
    [[ ! -e $base ]] && {
        emit -R "No work files present at '$(shorten "$base")'.  Cannot apply."
        exit 1
    }
elif (( ! reverse )); then
    [[ -e $base ]] && {
        emit -Y "You already have work files at '$(shorten "$base")'.  Perhaps you meant to use -R?"
        emit -Y "Continuing will delete all these files and replace them by the current server's files."
        echo; ask -y!N "Continue?" || exit
    }

    emit "Cleaning up '$base'" --
        rm -rf "$base"
    emit -$?
fi

if (( reverse )); then
: #    emit "Linking CSS and XHTML files from '$(shorten "$base")' to '$(shorten "$distribution")'" --
elif (( apply )); then
: #    emit "Applying CSS and XHTML files from '$(shorten "$base")' to repository" --
else
: #    emit "Linking CSS and XHTML files from '$(shorten "$distribution")' to '$(shorten "$base")'" --
fi

if (( apply )); then
    for w in "${!webapps[@]}"; do
        webapp=${webapps[w]}
        cd "$base/$webapp"

        find . '(' -name '*.xhtml' -o -name '*.css' ')' -print0 | while read -d '' file; do
            [[ -e $file~ ]] || {
                emit -y "Backup of '$(shorten "$file")' not found."
                continue
            }

            if ! diff -q "$file"{,~} >/dev/null; then
                dest="${repos[w]}/${file/-1.0-SNAPSHOT-exp.war//src/main/webapp}"

                if ! [[ -e $dest ]]; then
                    dest=( "${repos[w]}/"*"/src/main/webapp/${file/*-1.0-SNAPSHOT-exp.war/}" )

                    if (( ! ${#dest[@]} || ${#dest[@]} > 1 )) || [[ ! -e $dest ]]; then
                        emit -y "Source of '$(shorten "$file")' not found."
                        continue
                    fi
                fi

                cp "$file" "$dest"
            fi
        done
    done
else
    for webapp in "${webapps[@]}"; do
        cd "$distribution/jboss/server/default/tmp/deploy/"*"$webapp.ear-contents/"*"/css/../.." && \
            extractStuff
    done
fi

# (( apply )) || emit -$?
