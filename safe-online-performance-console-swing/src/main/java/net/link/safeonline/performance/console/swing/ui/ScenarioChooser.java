/*
 * SafeOnline project.
 *
 * Copyright 2006-2007 Lin.k N.V. All rights reserved.
 * Lin.k N.V. proprietary/confidential. Use is subject to license terms.
 */
package net.link.safeonline.performance.console.swing.ui;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileFilter;

import net.link.safeonline.performance.console.jgroups.AgentState;
import net.link.safeonline.performance.console.swing.data.ConsoleAgent;
import net.link.safeonline.performance.console.swing.data.ConsoleData;
import net.link.safeonline.performance.console.swing.model.PDF;
import net.link.safeonline.performance.console.swing.model.ScenarioDeployerThread;
import net.link.safeonline.performance.console.swing.model.ScenarioExecutorThread;
import net.link.safeonline.performance.console.swing.model.ScenarioUploaderThread;

import org.jgroups.Address;

/**
 * This class keeps and listens to the UI components that upload, deploy and
 * execute scenarios on agents.
 *
 * @author mbillemo
 */
public class ScenarioChooser extends JPanel implements ActionListener,
		CaretListener {

	private static final long serialVersionUID = 1L;

	private JButton uploadButton;
	private JButton deployButton;
	private JButton executeButton;
	private JButton chartsButton;
	private JButton pdfButton;
	private JButton refreshButton;
	private JButton resetButton;
	protected JButton browseButton;
	protected JPanel actionButtons;
	protected JTextField scenarioField;

	public ScenarioChooser() {

		this.scenarioField = new JTextField(
				"/Users/mbillemo/Documents/design/safe-online/safe-online-performance-scenario-deploy/target/safe-online-performance-scenario-deploy-1.0-SNAPSHOT.ear");
		this.browseButton = new JButton("Browse ...");
		this.uploadButton = new JButton("Upload this Scenario");
		this.deployButton = new JButton("Deploy this Scenario");
		this.executeButton = new JButton("Execute this Scenario");
		this.chartsButton = new JButton("View Charts");
		this.pdfButton = new JButton("Create PDF");
		this.refreshButton = new JButton("Refresh the Agent Status");
		this.resetButton = new JButton("Reset the Agent");

		JPanel firstRow = new JPanel(new GridLayout(1, 0, 10, 0));
		JPanel secondRow = new JPanel(new GridLayout(1, 0, 10, 0));
		this.actionButtons = new JPanel(new GridLayout(2, 1, 0, 5));
		this.actionButtons.add(firstRow);
		this.actionButtons.add(secondRow);

		firstRow.add(this.uploadButton);
		firstRow.add(this.deployButton);
		firstRow.add(this.executeButton);
		firstRow.add(this.chartsButton);
		firstRow.add(this.pdfButton);
		secondRow.add(this.refreshButton);
		secondRow.add(this.resetButton);

		this.scenarioField.addCaretListener(this);
		this.browseButton.addActionListener(this);
		this.uploadButton.addActionListener(this);
		this.deployButton.addActionListener(this);
		this.executeButton.addActionListener(this);
		this.chartsButton.addActionListener(this);
		this.pdfButton.addActionListener(this);
		this.refreshButton.addActionListener(this);
		this.resetButton.addActionListener(this);

		this.scenarioField
				.setToolTipText("The EAR package that contains the scenario that must be uploaded to and executed by the agent.");
		this.browseButton
				.setToolTipText("Browse your hard disk for the scenario package to use.");
		this.uploadButton
				.setToolTipText("Upload the given scenario to the selected agents.  Undeploys any existing scenarios from the agents.");
		this.deployButton
				.setToolTipText("Instruct the selected agents to deploy the last scenario that was uploaded to them.");
		this.executeButton
				.setToolTipText("Execute the scenario on the selected agents for the given duration on the given OLAS host.");
		this.chartsButton
				.setToolTipText("Display the charts generated by the selected agents from their previously completed profiling run.");
		this.pdfButton
				.setToolTipText("Create, save and open a PDF file generated from the statistics collected by the selected agents.");
		this.refreshButton
				.setToolTipText("Query the current remote status of the selected agents.");
		this.resetButton
				.setToolTipText("Temporarily reset the selected agents' local status to unlock the buttons.");

		this.uploadButton.setEnabled(null != getScenarioFile());
		enableButtonsFor(AgentState.RESET);
	}

	/**
	 * @{inheritDoc}
	 */
	public void actionPerformed(ActionEvent e) {

		if (this.browseButton.equals(e.getSource())) {

			JFileChooser chooser = new JFileChooser();
			chooser.setFileFilter(new FileFilter() {

				@Override
				public boolean accept(File f) {

					return f.getName().endsWith(".ear") || f.isDirectory();
				}

				@Override
				public String getDescription() {

					return "Enterprise Archive (*.ear)";
				}
			});

			if (chooser.showDialog(this, "Choose") == JFileChooser.APPROVE_OPTION)
				this.scenarioField.setText(chooser.getSelectedFile().getPath());
		}

		else if (this.uploadButton.equals(e.getSource()))
			new ScenarioUploaderThread(getSelectedAgents(), this,
					getScenarioFile()).run();

		else if (this.deployButton.equals(e.getSource()))
			new ScenarioDeployerThread(getSelectedAgents(), this).run();

		else if (this.executeButton.equals(e.getSource()))
			new ScenarioExecutorThread(getSelectedAgents(), this).run();

		else if (this.chartsButton.equals(e.getSource()))
			Charts.display(getSelectedAgents().values());

		else if (this.pdfButton.equals(e.getSource()))
			PDF.generate(getSelectedAgents().values());

		else if (this.refreshButton.equals(e.getSource()))
			for (ConsoleAgent agent : getSelectedAgents().values())
				agent.updateState();

		else if (this.resetButton.equals(e.getSource()))
			for (ConsoleAgent agent : getSelectedAgents().values())
				agent.resetTransit();
	}

	private Map<Address, ConsoleAgent> getSelectedAgents() {

		Map<Address, ConsoleAgent> selectedAgents = new HashMap<Address, ConsoleAgent>();
		for (Map.Entry<Address, ConsoleAgent> agentEntry : ConsoleData
				.getInstance().getAgents().entrySet())
			if (agentEntry.getValue().isSelected())
				selectedAgents.put(agentEntry.getKey(), agentEntry.getValue());

		return selectedAgents;
	}

	/**
	 * @{inheritDoc}
	 */
	public void caretUpdate(CaretEvent e) {

		if (e.getSource().equals(this.scenarioField))
			for (ConsoleAgent agent : ConsoleData.getInstance().getAgents()
					.values())
				agent.fireAgentStatus();
	}

	/**
	 * Enable the right buttons. Disable the ones that shouldn't be touched.
	 */
	public void enableButtonsFor(AgentState currentState, AgentState... transit) {

		AgentState state = currentState;
		if (null == state)
			state = AgentState.RESET;

		boolean isTransitting = transit != null && transit.length > 0;
		this.resetButton.setEnabled(isTransitting);

		this.uploadButton.setEnabled(false);
		this.deployButton.setEnabled(false);
		this.executeButton.setEnabled(false);
		this.chartsButton.setEnabled(false);
		this.pdfButton.setEnabled(false);

		if (!isTransitting) {
			this.uploadButton.setEnabled(null != getScenarioFile());

			switch (state) {
			case RESET:
				break;

			case UPLOAD:
				this.deployButton.setEnabled(true);
				break;

			case DEPLOY:
				this.executeButton.setEnabled(true);
				break;

			case EXECUTE:
				this.executeButton.setEnabled(true);
				this.chartsButton.setEnabled(true);
				this.pdfButton.setEnabled(true);
				break;
			}
		}

		List<AgentState> transits = new ArrayList<AgentState>();
		if (isTransitting)
			transits = Arrays.asList(transit);

		highlight(this.uploadButton, transits.contains(AgentState.UPLOAD));
		highlight(this.deployButton, transits.contains(AgentState.DEPLOY));
		highlight(this.executeButton, transits.contains(AgentState.EXECUTE));
	}

	private void highlight(JButton button, boolean highlightOn) {

		int style = highlightOn ? Font.ITALIC | Font.BOLD : 0;
		button.setFont(button.getFont().deriveFont(style));
	}

	/**
	 * Parse the picked or typed file out of the scenario file field.
	 *
	 * @return <code>null</code> if the file is non-existing, unreadable, or
	 *         not a file.
	 */
	private File getScenarioFile() {

		File scenarioFile = null;
		if (null != this.scenarioField.getText()) {
			scenarioFile = new File(this.scenarioField.getText());
			if (scenarioFile.isFile() && scenarioFile.canRead())
				return scenarioFile;
		}

		return null;
	}
}
