<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY mysql-create-account SYSTEM 
  "../../../../safe-online-sql-ddl/src/main/resources/mysql-create-account.sql">
<!ENTITY mysql-create-database SYSTEM
 "../../../../safe-online-sql-ddl/src/main/resources/mysql-create-database.sql">
<!ENTITY postgresql-create-account SYSTEM
  "../../../../safe-online-sql-ddl/src/main/resources/postgresql-create-account.sql">
<!ENTITY postgresql-create-database SYSTEM
  "../../../../safe-online-sql-ddl/src/main/resources/postgresql-create-database.sql">
<!ENTITY oracle-create-account SYSTEM
  "../../../../safe-online-sql-ddl/src/main/resources/oracle-create-account.sql">
]>
<book lang="en">
	<bookinfo>
		<title>OLAS Installation Manual</title>
		<copyright>
			<year>2007</year>
			<holder>LIN-K N.V.</holder>
		</copyright>
		<date>10/10/2007</date>
		<abstract>
			<para>
				This document contains installation instructions for the
				OLAS product.
			</para>
		</abstract>
		<releaseinfo>1.0.0</releaseinfo>
		<productname>OLAS</productname>
		<productnumber>1.0.0</productnumber>
		<authorgroup>
			<author>
				<firstname>Frank</firstname>
				<surname>Cornelis</surname>
			</author>
		</authorgroup>
	</bookinfo>

	<chapter id="introduction">
		<title>Introduction</title>
		<para>
			OLAS is an authentication, signature and user data exchange
			service. It allows 3th party web application to authenticate
			users, involve users in transactions and obtain user
			identity data. It brings to users a central identity
			management.
		</para>
		<para>
			OLAS offers several services to applications:
			<orderedlist>
				<listitem>
					<para>
						Authentication service: if an application calls
						this service the user is authenticated by OLAS
						using one of his configured devices. Upon
						success the application is informed and can
						grant access to the user.
					</para>
				</listitem>
				<listitem>
					<para>
						Attribute service: an application can query the
						user’s attributes and use their values in its
						business processes. Attributes can only be read
						if the user has given explicit permission to do
						so.
					</para>
				</listitem>
				<listitem>
					<para>
						Data service: an application can push attributes
						to the user’s profile. These attributes could
						then be used by other applications (if allowed
						by the user and the providing application).
					</para>
				</listitem>
				<listitem>
					<para>
						Validation service: an application can use this
						service to validate the authentication response
						tokens received from the authentication web
						application.
					</para>
				</listitem>
			</orderedlist>
		</para>
		<section>
			<title>Java</title>
			<para>
				OLAS was written in the Java programming language. This
				means that OLAS can be hosted on every platform that has
				a Java JVM available. This also means that OLAS is
				completely independent from the hosting operating
				system. The different JVM vendors that have been tested
				for hosting the OLAS service are listed below.
			</para>
			<section>
				<title>Sun JDK 1.5</title>
				<para>
					OLAS is known to run without any problems on the Sun
					JDK 1.5.0_13. This JVM can be downloaded from:
					<programlisting>
						http://java.sun.com/
					</programlisting>
				</para>
			</section>
			<section>
				<title>Sun JDK 1.6</title>
				<para>
					OLAS is known to run without any problems on the Sun
					JDK 1.6.0_06. This JVM can be downloaded from:
					<programlisting>
						http://java.sun.com/
					</programlisting>
				</para>
			</section>
			<section>
				<title>BEA JRockit 5.0</title>
				<para>
					OLAS is known to run without any problems on BEA
					JRockit 5.0 R27.3.1. This JVM can be downloaded
					from:
				</para>
				<programlisting>http://bea.com/</programlisting>
			</section>
		</section>
		<section>
			<title>JavaEE Application Server</title>
			<para>
				OLAS is a JavaEE application that requires a JavaEE
				application server as runtime environment. JavaEE is a
				widely used platform for Java server programming. The
				different JavaEE application servers that have been
				tested for hosting the OLAS product are listed below.
			</para>
			<section>
				<title>JBoss Application Server</title>
				<para>
					OLAS uses JBoss AS 4.2.2.GA as application server.
					This application server can be downloaded from:
					<programlisting>
						http://labs.jboss.com/jbossas/downloads/
					</programlisting>
					As OLAS comes pre-packaged with the JBoss
					application server one does not need to install
					JBoss AS manually. This has been done because the
					JBoss Application Server needs some OLAS specific
					tweaking.
				</para>
			</section>
		</section>
		<section>
			<title>Database</title>
			<para>
				OLAS is using the Java Persistence API (JPA) layer for
				persistence. Because of the usage of this abstraction
				layer, different DBMS products can be supported. Before
				being able to start the OLAS application one needs to
				initialize the OLAS database. This can be done via the
				OLAS command line interface (CLI). The different
				database products that are supported by OLAS are listed
				below.
			</para>
			<section>
				<title>MySQL</title>
				<para>
					OLAS has explicit support for MySQL 5.0. Before
					being able to use OLAS with a MySQL database one has
					to create an account on the DBMS. The following
					MySQL script can be used to create such an account.
					<programlisting>&mysql-create-account;
					</programlisting>
				</para>
				<para>
					This will create an account with name
					<constant>safeonline</constant>
					and password
					<code>safeonline</code>
					.
				</para>
				<para>
					The first time that you use MySQL it might be
					required to set a root password. Do this via:
					<command>
						mysqladmin -u root password 'secret'
					</command>
				</para>
				<para>
					After creating a MySQL account one needs to create
					an OLAS database. This can be done via the following
					script.
					<programlisting>&mysql-create-database;
					</programlisting>
					Correct configuration of the MySQL database can be
					easily verified via the OLAS CLI.
				</para>
			</section>
			<section>
				<title>PostgreSQL</title>
				<para>
					OLAS has explicit support for PostgreSQL version
					8.2. Before being able to use OLAS with a PostgreSQL
					database one has to create an account on the DBMS.
					The following PostgreSQL script can be used to
					create such an account.
					<programlisting>&postgresql-create-account;
					</programlisting>
					After creating a PostgreSQL account one needs to
					create an OLAS database. This can be done via the
					following script.
					<programlisting>&postgresql-create-database;
					</programlisting>
					Correct configuration of the PostgreSQL database can
					be easily verified via the OLAS CLI.
				</para>
			</section>
			<section>
				<title>Oracle</title>
				<para>
					OLAS has explicit support for Oracle Database 11g
					Release 1 (11.1). Before being able to use OLAS with
					an Oracle database one has to create an account on
					the DBMS. The following Oracle script can be used to
					create such an account.
					<programlisting>&oracle-create-account;
					</programlisting>
					After creating an Oracle account one needs to create
					an OLAS database. This can be done by the Oracle
					supplied program
					<![CDATA[dbca]]>. Be sure to take as Oracle System Identifier:
					<![CDATA[safeonline]]>. Correct configuration of the Oracle database can
					be easily verified via the OLAS CLI.
				</para>
			</section>
		</section>
	</chapter>

	<chapter id="topology">
		<title>OLAS Topology</title>
		<para>
			Different setup topologies are possible for hosting OLAS. In
			this chapter we will describe the most common topologies.
			Please keep in mind that other setups are also possible
			depending on your scalability needs.
		</para>
		<section>
			<title>Single node configuration</title>
			<para>
				This is the most simple configuration for hosting the
				OLAS services. Here you run OLAS and the DBMS on the
				same machine.
				<mediaobject>
					<imageobject>
						<imagedata format="SVG"
							fileref="single-node.svg" scale="50" scalefit="1" />
					</imageobject>
					<caption>
						OLAS and DBMS on the same machine.
					</caption>
				</mediaobject>
				The only downside that this setup brings is that you'll
				need to run OLAS under root privileges if you want to
				bind it to the TCP ports 80 (HTTP) and 443 (SSL). If you
				don't want to run OLAS under root privileges one can opt
				to bind it to the TCP ports 8080 and 8443. This is the
				default port assigned of JBoss Application Server.
			</para>
		</section>
		<section>
			<title>Dedicated Database</title>
			<para>
				Instead of running the DBMS on the same machine that
				hosts the OLAS service one can also host the database on
				a dedicated machine. Such a setup will most likely be
				preferred when the used DBMS is a clustered database
				across multiple machines. Most DBMS products these days
				support some sort of clustering. Please contact your
				DBMS vendor to see what's possible here.
			</para>
		</section>
		<section>
			<title>Apache HTTPD front-end</title>
			<para>
				If you want to run OLAS on the standard HTTP and SSL
				port 80 and 433 one has two options:
				<itemizedlist>
					<listitem>
						<para>Run JBoss AS at root privilege.</para>
					</listitem>
					<listitem>
						<para>
							Put an Apache HTTPD web server in front of
							JBoss AS.
						</para>
					</listitem>
				</itemizedlist>
				Next diagram highlights this later setup.
				<mediaobject>
					<imageobject>
						<imagedata format="SVG"
							fileref="apache-httpd.svg" scale="50" scalefit="1" />
					</imageobject>
					<caption>
						OLAS using an Apache HTTPD web server as
						front-end
					</caption>
				</mediaobject>
				When choosing to put an Apache web server in front of
				JBoss AS one needs to configure the HTTPD web server.
				The communication between the Apache web server and the
				JBoss Tomcat servlet container is using the AJP
				protocol. This requires the presence of the Apache
				Tomcat Proxy AJP module. Per default the JBoss AS will
				accept incoming AJP connections.
			</para>
			<section>
				<title>Configuration on Linux</title>
				<para>
					An example configuration for the HTTPD web server
					under Linux Fedora is given below. The configuration
					file
					<code>/etc/httpd/conf.d/proxy_ajp.conf</code>
					should contain similar entries as the ones below:
					<programlisting><![CDATA[LoadModule proxy_ajp_module modules/mod_proxy_ajp.so

ProxyPass /olas/ ajp://localhost:8009/olas/
ProxyPass /olas-oper/ ajp://localhost:8009/olas-oper/
ProxyPass /olas-owner/ ajp://localhost:8009/olas-owner/
ProxyPass /olas-helpdesk/ ajp://localhost:8009/olas-helpdesk/
ProxyPass /olas-auth/ ajp://localhost:8009/olas-auth/
ProxyPass /safe-online-ws/ ajp://localhost:8009/safe-online-ws/
					]]>
					</programlisting>
				</para>
			</section>
		</section>
	</chapter>

	<chapter id="package">
		<title>OLAS Distribution Package</title>
		<para>
			The distribution ZIP contains a pre-configured JBoss
			Application Server together with the OLAS JavaEE EAR file.
		</para>
		<section>
			<title>Pre-configured JBoss Application Server</title>
			<para>
				We deliver the OLAS services with a pre-configured JBoss
				Application Server (aka JBoss AS) since OLAS has some
				specific requirements towards to JavaEE container. The
				main customizations are:
				<itemizedlist>
					<listitem>
						<para>
							Inclusion of the Sun JAX-WS 2.1.3 RI web
							service runtime.
						</para>
					</listitem>
					<listitem>
						<para>
							Inclusion of the JBoss Seam runtime.
						</para>
					</listitem>
					<listitem>
						<para>
							Inclusion of required 3th party JARs.
						</para>
					</listitem>
					<listitem>
						<para>
							Security hardening of the JBoss AS
							container.
						</para>
					</listitem>
					<listitem>
						<para>
							Production configuration, mainly targeting
							data persistence.
						</para>
					</listitem>
				</itemizedlist>
				The exact customizations can be extracted by
				investigating the difference between the OLAS JBoss AS
				and a plain vanilla JBoss AS. Depending on your topology
				requirements other OLAS packaging can be delivered.
			</para>
		</section>
		<section>
			<title>OLAS JavaEE EAR</title>
			<para>
				The OLAS services and web applications are bundled as an
				EAR. This EAR file can be found at:
				<code>
					$JBOSS_HOME/server/default/deploy/SafeOnline.ear
				</code>
				The EAR contains:
				<itemizedlist>
					<listitem>
						<para>The JavaEE application itself.</para>
					</listitem>
					<listitem>
						<para>
							The OLAS command line interface (CLI)
							application.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
	</chapter>

	<chapter id="cli">
		<title>Command Line Interface</title>
		<para>
			The OLAS application comes with a CLI to manage the database
			schema. If the OLAS application is started without correctly
			initializing the database one will receive error messages
			that look as follows:
		</para>
		<para>
			<programlisting><![CDATA[ObjectName: persistence.units:ear=SafeOnline.ear,
unitName=SafeOnlineEntityManager
    State: FAILED
    Reason: javax.persistence.PersistenceException:
       org.hibernate.HibernateException: Missing table: access_audit]]></programlisting>
		</para>
		<section>
			<title>Running the CLI</title>
			<para>The OLAS CLI can be started via</para>
			<para>
				<command>
					java -jar server/default/deploy/SafeOnline.ear
				</command>
			</para>
		</section>
		<section>
			<title>Connecting to a database</title>
			<para>
				Via the CLI main menu one can create a new database
				connection. Here you can enter a JDBC driver JAR
				location. After that step the different available
				database plugins will be listed. Select the appropriate
				one. After this step DBMS specific settings will be
				asked for. For example, for MySQL the JDBC connection
				URL looks like:
				<code>jdbc:mysql://localhost/safeonline</code>
				After going through all questions the CLI will have an
				open connection to the OLAS database.
			</para>
		</section>
		<section>
			<title>Database schema verification</title>
			<para>
				The OLAS database contains a metadata table that
				contains the schema version of the specific OLAS that
				you're about to deploy. Via the CLI one can verify
				whether the OLAS database version is in line with the
				requirements of the deploying OLAS.
			</para>
		</section>
		<section>
			<title>Database schema initialization</title>
			<para>
				The tables of a fresh database can also be initialized
				via the CLI.
			</para>
		</section>
		<section>
			<title>Database schema upgrades</title>
			<para>
				This CLI has been constructed to also allow for database
				schema upgrades when installing newer versions of OLAS.
			</para>
		</section>
	</chapter>

	<chapter id="pre-deploy-configuration">
		<title>Pre-deployment Configuration</title>
		<para>
			The OLAS product has been constructed in such a way that you
			can run it as is out-of-the-box. But for optimal production
			environments it is recommended to perform some minimal
			configuration before deployment within the application
			server. This chapter will describe the different
			pre-deployment configuration facets.
		</para>
		<section>
			<title>Database</title>
			<para>
				The pre-configured JBoss AS comes with a datasource
				config depending on the requested DBMS. If for some
				reason one needs to change the database configuration
				you can check out the corresponding
				<code>
					$JBOSS_HOME/server/default/deploy/...-ds.xml
				</code>
				JBoss datasource configuration file.
			</para>
		</section>
		<section>
			<title>SSL</title>
			<para>
				Depending on the OLAS topology, i.e. whether you're
				using a front-end Apache web server, a different setup
				of the SSL keys will be required. When you let JBoss
				Tomcat handle the SSL itself you can configure the used
				SSL certificate under:
				<code>$JBOSS_HOME/server/default/conf/ssl.jks</code>
				This file is using the Java keystore file format.
				Visualize the content of such a keystore via:
				<prompt>
					keytool -list -v -keystore ssl.jks -keypass secret
					-storepass secret
				</prompt>
				Make sure that the common name of the SSL subject
				corresponds with the host name of the OLAS service.
			</para>
			<para>
				When your keystore is in a different location or in a
				different format you can configure Tomcat via the
				following file:
				<code>
					$JBOSS_HOME/server/default/deploy/jboss-web.deployer/server.xml
				</code>
			</para>
		</section>
		<section>
			<title>OLAS Identity Keystore</title>
			<para>
				Besides an SSL certificate OLAS also needs a certificate
				of itself to sign the issued SAML tokens. Per default
				the OLAS EAR comes bundled with a test keystore under
				<code>
					$JBOSS_HOME/server/default/deploy/SafeOnline.ear/safe-online-service.sar/safe-online-keystore.jar
				</code>
				One can refer to external keystores by editing the file:
				<code>
					$JBOSS_HOME/server/default/deploy/SafeOnline.ear/safe-online-service.sar/META-INF/jboss-service.xml
				</code>
				as follows:
				<programlisting><![CDATA[<mbean name="safeonline:service=Identity"
    code="net.link.safeonline.service.IdentityService"
    xmbean-dd="META-INF/identity-xmbean.xml">
    <attribute name="KeyStoreType">pkcs12</attribute>
    <attribute name="KeyStoreFile">
        /location/to/my/keystore.p12
    </attribute>
    <attribute name="KeyStorePassword">secret</attribute>
</mbean>]]></programlisting>
				This will require a repackaging of
				<code>safe-online-service.sar</code>
				and
				<code>SafeOnline.ear</code>
				If the JMX Console is available on the hosting JBoss AS
				one can also reconfigure the used identity keystore at
				runtime via the JMX interface under
				<code>safeonline</code>
				<code>service=Identity</code>
			</para>
		</section>
		<section>
			<title>OLAS Authentication Identity Keystore</title>
			<para>
				OLAS also needs an authentication certificate of itself
				which will be used to authentication against other OLAS
				nodes. Per default the OLAS EAR comes bundled with a
				test keystore under
				<code>
					$JBOSS_HOME/server/default/deploy/SafeOnline.ear/safe-online-service.sar/safe-online-node-keystore.jar
				</code>
				One can refer to external keystores by editing the file:
				<code>
					$JBOSS_HOME/server/default/deploy/SafeOnline.ear/safe-online-service.sar/META-INF/jboss-service.xml
				</code>
				as follows:
				<programlisting><![CDATA[<mbean name="safeonline:service=AuthIdentity"
    code="net.link.safeonline.service.AuthIdentityService"
    xmbean-dd="META-INF/auth-identity-xmbean.xml">
    <attribute name="KeyStoreType">pkcs12</attribute>
    <attribute name="KeyStoreFile">
        /location/to/my/keystore.p12
    </attribute>
    <attribute name="KeyStorePassword">secret</attribute>
</mbean>]]></programlisting>
				This will require a repackaging of
				<code>safe-online-service.sar</code>
				and
				<code>SafeOnline.ear</code>
				If the JMX Console is available on the hosting JBoss AS
				one can also reconfigure the used identity keystore at
				runtime via the JMX interface under
				<code>safeonline</code>
				<code>service=AuthIdentity</code>
			</para>
		</section>

		<section>
			<title>Applets</title>
			<para>
				OLAS comes with a few Java Applets required by certain
				authentication devices. The corresponding Applet JARS
				have already been signed and are ready for production
				usage.
			</para>
		</section>
		<section>
			<title>Syslog</title>
			<para>
				OLAS is using a syslog service for auditing purposes.
				The syslog server can be configured via the operator web
				application.
			</para>
		</section>
	</chapter>

	<chapter id="deployment">
		<title>Deployment</title>
		<para>
			Deploy the OLAS service via:
			<programlisting><![CDATA[cd jboss/bin
./run.sh -b 0.0.0.0]]></programlisting>
			This will start the JBoss AS and will also deploy the OLAS
			JavaEE application. Check the JBoss console output during
			startup for exceptions.
		</para>
	</chapter>

	<chapter id="post-deployment-configuration">
		<title>Post-deployment Configuration</title>
		<para>
			After the first deployment of OLAS it is recommended to
			further configure the OLAS instance via the operator web
			application configuration screen. The changes made in the
			configuration section will be made persistent within the
			database.
		</para>
	</chapter>
</book>