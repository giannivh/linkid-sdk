<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY mysql-create-account SYSTEM 
  "../../../../safe-online-sql-ddl/src/main/resources/mysql-create-account.sql">
<!ENTITY mysql-create-database SYSTEM
 "../../../../safe-online-sql-ddl/src/main/resources/mysql-create-database.sql">
]>
<book lang="en">
	<bookinfo>
		<title>OLAS Installation Manual</title>
		<copyright>
			<year>2007</year>
			<holder>LIN-K N.V.</holder>
		</copyright>
		<date>10/10/2007</date>
		<abstract>
			<para>
				This document contains installation instructions for the
				OLAS product.
			</para>
		</abstract>
		<releaseinfo>1.0.0</releaseinfo>
		<productname>OLAS</productname>
		<productnumber>1.0.0</productnumber>
		<authorgroup>
			<author>
				<firstname>Frank</firstname>
				<surname>Cornelis</surname>
			</author>
		</authorgroup>
	</bookinfo>

	<chapter id="introduction">
		<title>Introduction</title>
		<para>
			OLAS is an authentication, signature and user data exchange
			service. It allows 3th party web application to authenticate
			users, involve users in transactions and obtain user
			identity data. It brings to users a central identity
			management.
		</para>
		<para>
			OLAS offers several services to applications:
			<orderedlist>
				<listitem>
					<para>
						Authentication service: if an application calls
						this service the user is authenticated by OLAS
						using one of his configured devices. Upon
						success the application is informed and can
						grant access to the user.
					</para>
				</listitem>
				<listitem>
					<para>
						Attribute service: an application can query the
						user’s attributes and use their values in its
						business processes. Attributes can only be read
						if the user has given explicit permission to do
						so.
					</para>
				</listitem>
				<listitem>
					<para>
						Data service: an application can push attributes
						to the user’s profile. These attributes could
						then be used by other applications (if allowed
						by the user and the providing application).
					</para>
				</listitem>
				<listitem>
					<para>
						Validation service: an application can use this
						service to validate the authentication response
						tokens received from the authentication web
						application.
					</para>
				</listitem>
			</orderedlist>
		</para>
		<section>
			<title>Java</title>
			<para>
				OLAS was written in the Java programming language. This
				means that OLAS can be hosted on every platform that has
				a Java JVM available. This also means that OLAS is
				completely independent from the hosting operating
				system. The different JVM vendors that have been tested
				for hosting the OLAS service are listed below.
			</para>
			<section>
				<title>Sun JDK 1.5</title>
				<para>
					OLAS is known to run without any problems on the Sun
					JDK 1.5.0_13. This JVM can be downloaded from:
					<programlisting>
						http://java.sun.com/
					</programlisting>
				</para>
			</section>
			<section>
				<title>BEA JRockit 5.0</title>
				<para>
					OLAS is known to run without any problems on BEA
					JRockit 5.0 R27.3.1. This JVM can be downloaded
					from:
				</para>
				<programlisting>http://bea.com/</programlisting>
			</section>
		</section>
		<section>
			<title>JavaEE Application Server</title>
			<para>
				OLAS is a JavaEE application that requires a JavaEE
				application server as runtime environment. JavaEE is a
				widely used platform for Java server programming. The
				different JavaEE application servers that have been
				tested for hosting the OLAS product are listed below.
			</para>
			<section>
				<title>JBoss Application Server</title>
				<para>
					OLAS uses JBoss AS 4.2 as application server. This
					application server can be downloaded from:
					<programlisting>
						http://labs.jboss.com/jbossas/downloads/
					</programlisting>
					As OLAS comes pre-packaged with the JBoss
					application server one does not need to install
					JBoss AS manually. This has been done because the
					JBoss Application Server needs some OLAS specific
					tweaking.
				</para>
			</section>
		</section>
		<section>
			<title>Database</title>
			<para>
				OLAS is using the Java Persistence API (JPA) layer for
				persistence. Because of the usage of this abstraction
				layer, different DBMS products can be supported. Before
				being able to start the OLAS application one needs to
				initialize the OLAS database. This can be done via the
				OLAS command line interface (CLI). The different
				database products that are supported by OLAS are listed
				below.
			</para>
			<section>
				<title>MySQL</title>
				<para>
					OLAS has explicit support for MySQL 5.0. Before
					being able to use OLAS with a MySQL database one has
					to create an account on the DBMS. The following
					MySQL script can be used to create such an account.
					<programlisting>&mysql-create-account;</programlisting>
					After creating a MySQL account one needs to create an OLAS
					database. This can be done via the following script.
					<programlisting>&mysql-create-database;</programlisting>
				</para>
			</section>
		</section>
	</chapter>

	<chapter id="topology">
		<title>OLAS Topology</title>
		<para>
			Different setup topologies are possible for hosting OLAS.
		</para>
		<section>
			<title>Single node configuration</title>
			<para>
				This is the most simple configuration for hosting the
				OLAS services. Here you run OLAS and the DBMS on the
				same machine.
				<mediaobject>
					<imageobject>
						<imagedata format="SVG" fileref="single-node.svg" scale="50" scalefit="1"/>
					</imageobject>
					<caption>OLAS and DBMS on the same machine.</caption>
				</mediaobject>
			</para>
		</section>
		<section>
			<title>Dedicated Database</title>
			<para>
				Instead of running the DBMS on the same machine that
				hosts the OLAS service one can also host the database on
				a dedicated machine.
			</para>
		</section>
		<section>
			<title>Apache HTTPD front-end</title>
			<para>If you want to run OLAS on the standard HTTP and SSL port 80 and 433 one has two options:
			<itemizedlist>
				<listitem>
					<para>Run JBoss AS at root privilege.</para>
				</listitem>
				<listitem>
					<para>Put an Apache HTTPD web server in front of JBoss AS.</para>
				</listitem>
			</itemizedlist>
			Next diagram highlights this setup.		
			<mediaobject>
					<imageobject>
						<imagedata format="SVG" fileref="apache-httpd.svg" scale="50" scalefit="1"/>
					</imageobject>
					<caption>OLAS using an Apache HTTPD web server as front-end</caption>
				</mediaobject>
			When choosing to put an Apache web server in front of JBoss AS one needs to configure
			</para>
		</section>
	</chapter>

	<chapter id="package">
		<title>OLAS Distribution Package</title>
		<para>
			The distribution ZIP contains a pre-configured JBoss
			Application Server together with the OLAS JavaEE EAR file.
		</para>
		<section>
			<title>Pre-configured JBoss AS</title>
			<para>
				We deliver the OLAS services with a pre-configured JBoss
				AS since OLAS has some specific requirements towards to
				JavaEE container. The main customizations are:
				<itemizedlist>
					<listitem>
						<para>
							Inclusion of the Sun JAX-WS 2.1 RI web
							service runtime.
						</para>
					</listitem>
					<listitem>
						<para>
							Inclusion of the JBoss Seam runtime.
						</para>
					</listitem>
					<listitem>
						<para>
							Security hardening of the JBoss AS
							container.
						</para>
					</listitem>
					<listitem>
						<para>
							Production configuration, mainly targeting
							data persistence.
						</para>
					</listitem>
				</itemizedlist>
				The exact customizations can be extracted by
				investigating the difference between the OLAS JBoss AS
				and a plain vanilla JBoss AS.
			</para>
		</section>
		<section>
			<title>OLAS EAR</title>
			<para>
				The OLAS services and web applications are bundled as an
				EAR.
				<programlisting>
					server/default/deploy/SafeOnline.ear
				</programlisting>
				The EAR contains:
				<itemizedlist>
					<listitem>
						<para>The JavaEE application itself.</para>
					</listitem>
					<listitem>
						<para>
							The OLAS command line interface (CLI)
							application.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
	</chapter>

	<chapter id="cli">
		<title>Command Line Interface</title>
		<para>
			The OLAS application comes with a CLI to manage the database
			schema. If the OLAS application is started without correctly
			initializing the database one will receive error messages
			that look as follows:
		</para>
		<para>
			<programlisting>
				ObjectName: persistence.units:ear=SafeOnline.ear,
				unitName=SafeOnlineEntityManager State: FAILED Reason:
				javax.persistence.PersistenceException:
				org.hibernate.HibernateException: Missing table:
				access_audit
			</programlisting>
		</para>
		<section>
			<title>Running the CLI</title>
			<para>The OLAS CLI can be started via</para>
			<para>
				<command>
					java -jar server/default/deploy/SafeOnline.ear
				</command>
			</para>
		</section>
		<section>
			<title>Connecting to a database</title>
			<para>
				Via the CLI main menu one can create a new database
				connection. Here you can enter a JDBC driver JAR
				location. After that step the different available
				database plugins will be listed. Select the appropriate
				one. After this step DBMS specific settings will be
				asked for. For example, for MySQL the JDBC connection
				URL looks like:
				<programlisting>jdbc:mysql://localhost/safeonline</programlisting>
				After going through all questions the CLI will have an
				open connection to the OLAS database.
			</para>
		</section>
		<section>
			<title>Database schema verification</title>
			<para>
				The OLAS database contains a metadata table that
				contains the schema version of the specific OLAS that
				you're about to deploy. Via the CLI one can verify
				whether the OLAS database version is in line with the
				requirements of the deploying OLAS.
			</para>
		</section>
		<section>
			<title>Database schema initialization</title>
			<para>
				The tables of a fresh database can also be initialized
				via the CLI.
			</para>
		</section>
	</chapter>

	<chapter id="configuration">
		<title>Pre-deployment Configuration</title>
		<para>
			Explain that OLAS requires some minimal configuration before
			deployment within the application server.
		</para>
		<section>
			<title>SSL</title>
			<para>
				Describe that we need to configure some keys for SSL.
			</para>
		</section>
		<section>
			<title>OLAS X509</title>
			<para>
				Describe that OLAS needs a certificate of itself to sign
				the issued SAML tokens.
			</para>
		</section>
		<section>
			<title>Applets</title>
			<para>
				Describe that the OLAS Java Applets need to be signed.
			</para>
		</section>
		<section>
			<title>Syslog</title>
			<para>Describe the need for a syslog service.</para>
		</section>
	</chapter>

	<chapter id="deployment">
		<title>Deployment</title>
		<para>Deploy the OLAS service via:</para>
		<programlisting>cd jboss/bin ./run.sh</programlisting>
	</chapter>
</book>