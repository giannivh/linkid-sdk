#!/bin/bash
# ___________________________________________________________________________ #
#																			 #
#	   InitDB -- Initialize the DS used by the web application.			  #
#																			 #
#																			 #
#	Licensed under the Apache License, Version 2.0 (the "License");		  #
#	you may not use this file except in compliance with the License.		 #
#	You may obtain a copy of the License at								  #
#																			 #
#		http://www.apache.org/licenses/LICENSE-2.0						   #
#																			 #
#	Unless required by applicable law or agreed to in writing, software	  #
#	distributed under the License is distributed on an "AS IS" BASIS,		#
#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#	See the License for the specific language governing permissions and	  #
#	limitations under the License.										   #
# ___________________________________________________________________________ #
#																			 #
#																			 #
# Copyright 2007, lhunath													 #
#   * http://lhunath.lyndir.com											   #
#   * Maarten Billemont.													  #
#																			 #
source "${0%/*}/bashlib"													  #
scripts="${0%/*}"; [[ $scripts = /* ]] || scripts=$PWD/$scripts
distribution=$(cd "$scripts/.."; echo "${PWD##*/}")
source "$scripts/bashlib"

# Check whether the distribution is valid.
cd "$scripts/../jboss/server/default/deploy" || { emit -r "Invalid distribution: '$distribution'."; exit 1; }

# Find and read in configuration of our datasource.
dbconfig=( !(jms)-ds.xml )
[[ $dbconfig ]] || { emit -r "No database configuration found for '$distribution'."; exit 1; }
jdbcUrl=$(sed -n 's/.*\(jdbc:[^< ]*\).*/\1/p' "$dbconfig")
IFS=':/' read _ dbms _ _ host port db <<< "$jdbcUrl"
read user < <(sed -n '/<user-name>/ s/.*<user-name> *\([^ <]*\).*/\1/p' "$dbconfig")
read pass < <(sed -n '/<password>/ s/.*<password> *\([^ <]*\).*/\1/p' "$dbconfig")

# Bail if some required attributes couldn't be parsed in.
if [[ ! $dbms ]]; then
	emit -r "No data source configuration found."
	exit 1
fi
if [[ ! $jdbcUrl ]]; then
	emit -r "No (valid) JDBC connection url found in '$dbconfig'."
	exit 1
fi
if [[ ! $user || ! $pass ]]; then
	emit -r "No username and/or password found in '$dbconfig'."
	exit 1
fi

# Drop & recreate the database configured in our datasource configuration file.
rebuildDb() {
	case $dbms in

		hsql)
			;;

		mysql)
			rootpass=$(ask -% "The root MySQL password:")

			mysql -h"$host" -P"$port" -uroot -p"$rootpass" <<< "DROP DATABASE IF EXISTS $db; CREATE DATABASE IF NOT EXISTS $db;" ;;

		oracle)
			;;

		*)
			emit -R "Don't know how to rebuild the database for $dbms!"; exit ;;
	esac
			
}

# Create the tables (run the DDL) for the given EAR file using the EAR's CLI.
initDbWithCLI() {
	java -jar "$1" <<-END
		C
		../lib/ojdbc5-11.1.0.6.0.jar
		1
		$jdbcUrl
		$user
		$pass
		I
		E
	END
}

# Empty the database for the given EAR file, then refill it with fresh tables.
initDb() {
	local ear=$1

	case $dbms in

		hsql)
			;;

		mysql)
			case $ear in
				SafeOnline.ear|safe-online-deploy*.ear)
					emit "Rebuilding SafeOnline"
						mysql -h"$host" -P"$port" -uroot -p"$rootpass" < <(unzip -qc "$ear" resources/mysql-create-database.sql) && \
						mysql -h"$host" -P"$port" -uroot -p"$rootpass" < <(unzip -qc "$ear" resources/mysql-create-account.sql) && \

						initDbWithCLI "$ear"
					(( $? )) && exit
				;;

				Dodentocht.ear|dodentocht-deploy*.ear)
					emit "Rebuilding Dodentocht" --
						(
							cd "$scripts/../sql"
							echo "Creating '$db' database.."
							mysql -uroot -p"$rootpass" < mysql-create-database.sql || exit

							echo "Creating database user '$user'.."
							mysql -uroot -p"$rootpass" < mysql-create-account.sql || exit

							echo "Initializing '$db' database schema.."
							mysql -u"$user" -p"$pass" "$db" < mysql-dodentocht-ddl.sql || exit
						)
					emit -$? || exit
				;;
			esac ;;

		oracle)
			case $ear in
				SafeOnline.ear|safe-online-deploy*.ear)
					emit "Rebuilding SafeOnline"
						LD_LIBRARY_PATH=$ORACLE_HOME/lib:$ORACLE_HOME/client/lib sqlplus "$user/$pass" @<(
							cat <<-END
								SET ESCAPE \
								SPOOL DELETEME.sql
								select 'drop table ', table_name, 'cascade constraints \;' from user_tables;
								drop sequence hibernate_sequence;
								SPOOL OFF
								@DELETEME
							END
						)

						initDbWithCLI "$ear"
					(( $? )) && exit ;;
            esac ;;

		*)
			emit -R "Don't know how to initialize databases for $dbms"; exit ;;
	esac
}


# Drop and rebuild the database.
emit "Rebuilding database '$db' on host '$host:$port' for user '$user' (DBMS: '$dbms')"
rebuildDb


# Rebuild the database if we can find the DDL scripts for it.
for ear in *.ear; do
	initDb "$ear"
done

emit "Ready with '$db' for '$distribution'."
