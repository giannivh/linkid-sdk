/*
 * SafeOnline project.
 *
 * Copyright 2006-2007 Lin.k N.V. All rights reserved.
 * Lin.k N.V. proprietary/confidential. Use is subject to license terms.
 */

package net.link.safeonline.auth;

import java.io.IOException;
import java.util.Locale;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.link.safeonline.auth.protocol.AuthenticationServiceManager;
import net.link.safeonline.authentication.exception.NodeNotFoundException;
import net.link.safeonline.authentication.exception.SafeOnlineException;
import net.link.safeonline.authentication.service.AuthenticationService;
import net.link.safeonline.common.SafeOnlineAppConstants;
import net.link.safeonline.sdk.auth.saml2.RequestUtil;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jboss.seam.faces.FacesMessages;


public class AuthenticationUtils {

    private static final Log   LOG                                      = LogFactory.getLog(AuthenticationUtils.class);

    public static final String DEVICE_AUTH_SERVICE_URL_INIT_PARAM       = "DeviceAuthenticationServiceUrl";

    public static final String DEVICE_REG_SERVICE_URL_INIT_PARAM        = "DeviceRegistrationServiceUrl";

    public static final String SAML2_POST_BINDING_VM_RESOURCE           = "/net/link/safeonline/device/sdk/saml2/binding/saml2-post-binding.vm";

    public static final String SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM = "Saml2BrowserPostTemplate";

    public static final String REQUEST_URL_INIT_PARAM                   = "RequestUrl";


    private AuthenticationUtils() {

        // empty
    }

    public static void commitAuthentication(FacesMessages facesMessages) {

        FacesContext context = FacesContext.getCurrentInstance();
        ExternalContext externalContext = context.getExternalContext();
        try {
            externalContext.redirect("./exit");
        } catch (IOException e) {
            String msg = "IO error: " + e.getMessage();
            LOG.debug(msg);
            facesMessages.addFromResourceBundle(FacesMessage.SEVERITY_ERROR, "errorIO");
            return;
        }
    }

    /**
     * Redirects the authentication webapp to the external device landing page using the SAML browser post protocol. The SAML authentication
     * request is generated by the authentication service associated with this HTPP session.
     * <p>
     * The method requires the <code>DeviceAuthenticationServiceUrl</code> init parameter defined in web.xml pointing to the location of the
     * authentication web application location the Device issuer should return to.
     * </p>
     * <p>
     * An optional initialization parameter <code>Saml2BrowserPostTemplate</code> can be defnied in web.xml, specifying a custom SAML2
     * browser post velocity template.
     * </p>
     * 
     * 
     * @param requestUrl
     * @param landingUrl
     * @param device
     */
    public static void redirectAuthentication(HttpServletRequest httpRequest, HttpServletResponse httpResponse, Locale language,
                                              String requestUrl, String landingUrl, String device) {

        LOG.debug("redirecting to: " + landingUrl);

        String authenticationServiceUrl = getInitParameter(httpRequest, DEVICE_AUTH_SERVICE_URL_INIT_PARAM);

        String templateResourceName = SAML2_POST_BINDING_VM_RESOURCE;
        if (findInitParameter(httpRequest, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM) != null) {
            templateResourceName = getInitParameter(httpRequest, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM);
        }

        // Required for the servlet handling the returned saml response to know where to redirect to if the
        // authentication is canceled.
        httpRequest.getSession().setAttribute(REQUEST_URL_INIT_PARAM, requestUrl);
        Integer color = (Integer) httpRequest.getSession().getAttribute(SafeOnlineAppConstants.COLOR_ATTRIBUTE);
        Boolean minimal = (Boolean) httpRequest.getSession().getAttribute(SafeOnlineAppConstants.MINIMAL_ATTRIBUTE);

        /*
         * Next is required to preserve the session if the browser does not support cookies.
         */
        String encodedLandingUrl = httpResponse.encodeRedirectURL(landingUrl);
        LOG.debug("landing url: " + encodedLandingUrl);

        AuthenticationService authenticationService = AuthenticationServiceManager.getAuthenticationService(httpRequest.getSession());

        String encodedSamlRequestToken;
        try {
            encodedSamlRequestToken = authenticationService.redirectAuthentication(authenticationServiceUrl, encodedLandingUrl, device);
        } catch (NodeNotFoundException e) {
            throw new RuntimeException("could not initiate authentication: Node not found :" + e.getMessage(), e);
        }

        try {
            RequestUtil.sendRequest(encodedLandingUrl, encodedSamlRequestToken, language, color, minimal, templateResourceName,
                    httpResponse, false);
        } catch (ServletException e) {
            throw new RuntimeException("could not initiate authentication: " + e.getMessage(), e);
        } catch (IOException e) {
            throw new RuntimeException("could not initiate authentication: " + e.getMessage(), e);
        }
    }

    /**
     * Redirects the authentication to the external device registration landing page using the SAML browser post protocol. The SAML
     * authentication request is generated by the authentication service associated with this HTTP session.
     * <p>
     * The method requires the <code>DeviceRegistrationServiceUrl</code> init parameter defined in web.xml pointing to the location of the
     * authentication web application location the device issuer should return to.
     * </p>
     * <p>
     * An optional initialization parameter <code>Saml2BrowserPostTemplate</code> can be defnied in web.xml, specifying a custom SAML2
     * browser post velocity template.
     * </p>
     * 
     * 
     * @param landingUrl
     *            the location at the remote device issuer where to post the authentication request to
     * @param device
     * @param userId
     */
    public static void redirect(HttpServletRequest httpRequest, HttpServletResponse httpResponse, Locale language, String landingUrl,
                                String device, String userId) {

        LOG.debug("redirecting to: " + landingUrl);

        String registrationServiceUrl = getInitParameter(httpRequest, DEVICE_REG_SERVICE_URL_INIT_PARAM);

        String templateResourceName = SAML2_POST_BINDING_VM_RESOURCE;
        if (findInitParameter(httpRequest, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM) != null) {
            templateResourceName = getInitParameter(httpRequest, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM);
        }

        /*
         * Next is required to preserve the session if the browser does not support cookies.
         */
        String encodedLandingUrl = httpResponse.encodeRedirectURL(landingUrl);
        LOG.debug("landing url: " + encodedLandingUrl);

        AuthenticationService authenticationService = AuthenticationServiceManager.getAuthenticationService(httpRequest.getSession());
        Integer color = (Integer) httpRequest.getSession().getAttribute(SafeOnlineAppConstants.COLOR_ATTRIBUTE);
        Boolean minimal = (Boolean) httpRequest.getSession().getAttribute(SafeOnlineAppConstants.MINIMAL_ATTRIBUTE);

        String encodedSamlRequestToken;
        try {
            encodedSamlRequestToken = authenticationService.redirectRegistration(registrationServiceUrl, encodedLandingUrl, device, userId);
        } catch (SafeOnlineException e) {
            throw new RuntimeException("could not initiate device registration:" + e.getMessage(), e);
        }

        try {
            RequestUtil.sendRequest(encodedLandingUrl, encodedSamlRequestToken, language, color, minimal, templateResourceName,
                    httpResponse, false);
        } catch (ServletException e) {
            throw new RuntimeException("could not initiate device registration: " + e.getMessage(), e);
        } catch (IOException e) {
            throw new RuntimeException("could not initiate device registration: " + e.getMessage(), e);
        }
    }

    private static String findInitParameter(HttpServletRequest request, String parameterName) {

        return request.getSession().getServletContext().getInitParameter(parameterName);

    }

    private static String getInitParameter(HttpServletRequest request, String parameterName) {

        String initParameter = findInitParameter(request, parameterName);
        if (null == initParameter)
            throw new RuntimeException("missing context-param in web.xml: " + parameterName);
        return initParameter;

    }
}
