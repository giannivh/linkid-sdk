/*
 * SafeOnline project.
 *
 * Copyright 2006-2007 Lin.k N.V. All rights reserved.
 * Lin.k N.V. proprietary/confidential. Use is subject to license terms.
 */

package net.link.safeonline.auth;

import java.io.IOException;
import java.util.Locale;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.link.safeonline.auth.protocol.AuthenticationServiceManager;
import net.link.safeonline.authentication.exception.NodeNotFoundException;
import net.link.safeonline.authentication.exception.SafeOnlineException;
import net.link.safeonline.authentication.service.AuthenticationService;
import net.link.safeonline.common.SafeOnlineAppConstants;
import net.link.safeonline.model.node.util.NodeUtils;
import net.link.safeonline.sdk.auth.saml2.RequestUtil;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jboss.seam.faces.FacesMessages;


public class AuthenticationUtils {

    private static final Log   LOG                                      = LogFactory.getLog(AuthenticationUtils.class);

    public static final String SAML2_POST_BINDING_VM_RESOURCE           = "/net/link/safeonline/device/sdk/saml2/binding/saml2-post-binding.vm";

    /**
     * Resource path to a custom velocity template to build the browser POST that contains the SAML2 ticket. <i>[optional, default: A
     * built-in template]</i>
     */
    public static final String SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM = "Saml2BrowserPostTemplate";

    /**
     * PATH within olas-auth that the external device application should send the user back to after completing authentication.
     * <i>[required]</i>
     */
    public static final String DEVICE_AUTH_SERVICE_PATH_INIT_PARAM      = "DeviceAuthenticationServicePath";

    /**
     * PATH within olas-auth that the external device application should send the user back to after completing registration.
     * <i>[required]</i>
     */
    public static final String DEVICE_REG_SERVICE_PATH_INIT_PARAM       = "DeviceRegistrationServicePath";

    public static final String REQUEST_URL_SESSION_ATTRIBUTE            = "RequestUrl";


    private AuthenticationUtils() {

        // empty
    }

    public static void commitAuthentication(FacesMessages facesMessages) {

        FacesContext context = FacesContext.getCurrentInstance();
        ExternalContext externalContext = context.getExternalContext();
        try {
            externalContext.redirect("./exit");
        } catch (IOException e) {
            String msg = "IO error: " + e.getMessage();
            LOG.debug(msg);
            facesMessages.addFromResourceBundle(FacesMessage.SEVERITY_ERROR, "errorIO");
            return;
        }
    }

    /**
     * Redirects the authentication webapp to the external device landing page using the SAML browser post protocol. The SAML authentication
     * request is generated by the authentication service associated with this HTPP session.
     * 
     * <p>
     * An optional initialization parameter <code>Saml2BrowserPostTemplate</code> can be defined in web.xml, specifying a custom SAML2
     * browser post velocity template.
     * </p>
     * 
     * 
     * @param requestUrl
     * @param landingUrl
     * @param device
     */
    public static void redirectAuthentication(HttpServletRequest request, HttpServletResponse response, Locale language, String requestUrl,
                                              String landingUrl, String device) {

        LOG.debug("redirecting to: " + landingUrl);

        try {
            String deviceAuthenticationServicePath = NodeUtils.absoluteLocalNodeUrlForParam(request, DEVICE_AUTH_SERVICE_PATH_INIT_PARAM);

            String templateResourceName = SAML2_POST_BINDING_VM_RESOURCE;
            if (findInitParameter(request, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM) != null) {
                templateResourceName = getInitParameter(request, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM);
            }

            // Required for the servlet handling the returned SAML response to know where to redirect to if the
            // authentication is cancelled.
            request.getSession().setAttribute(REQUEST_URL_SESSION_ATTRIBUTE, requestUrl);
            Integer color = (Integer) request.getSession().getAttribute(SafeOnlineAppConstants.COLOR_SESSION_ATTRIBUTE);
            Boolean minimal = (Boolean) request.getSession().getAttribute(SafeOnlineAppConstants.MINIMAL_SESSION_ATTRIBUTE);

            /*
             * Next is required to preserve the session if the browser does not support cookies.
             */
            String encodedLandingUrl = response.encodeRedirectURL(landingUrl);
            LOG.debug("landing url: " + encodedLandingUrl);

            AuthenticationService authenticationService = AuthenticationServiceManager.getAuthenticationService(request.getSession());

            String encodedSamlRequestToken = authenticationService.redirectAuthentication(deviceAuthenticationServicePath,
                    encodedLandingUrl, device);

            RequestUtil.sendRequest(encodedLandingUrl, encodedSamlRequestToken, language, color, minimal, templateResourceName, response,
                    false);
        }

        catch (NodeNotFoundException e) {
            throw new IllegalStateException("not on an olas node?", e);
        } catch (ServletException e) {
            throw new RuntimeException("could not initiate authentication: " + e.getMessage(), e);
        } catch (IOException e) {
            throw new RuntimeException("could not initiate authentication: " + e.getMessage(), e);
        }
    }

    /**
     * Redirects the authentication to the external device registration landing page using the SAML browser post protocol. The SAML
     * authentication request is generated by the authentication service associated with this HTTP session.
     * 
     * <ul>
     * <li>{@link #DEVICE_REG_SERVICE_PATH_INIT_PARAM}</li>
     * <li>{@link #SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM}</li>
     * </ul>
     * 
     * 
     * @param landingUrl
     *            the location at the remote device issuer where to post the authentication request to
     * @param device
     * @param userId
     */
    public static void redirect(HttpServletRequest request, HttpServletResponse response, Locale language, String landingUrl,
                                String device, String userId) {

        LOG.debug("redirecting to: " + landingUrl);

        try {
            String deviceRegistrationServicePath = NodeUtils.absoluteLocalNodeUrlForParam(request, DEVICE_REG_SERVICE_PATH_INIT_PARAM);

            String templateResourceName = SAML2_POST_BINDING_VM_RESOURCE;
            if (findInitParameter(request, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM) != null) {
                templateResourceName = getInitParameter(request, SAML2_BROWSER_POST_TEMPLATE_CONFIG_PARAM);
            }

            /*
             * Next is required to preserve the session if the browser does not support cookies.
             */
            String encodedLandingUrl = response.encodeRedirectURL(landingUrl);
            LOG.debug("landing url: " + encodedLandingUrl);

            AuthenticationService authenticationService = AuthenticationServiceManager.getAuthenticationService(request.getSession());
            Integer color = (Integer) request.getSession().getAttribute(SafeOnlineAppConstants.COLOR_SESSION_ATTRIBUTE);
            Boolean minimal = (Boolean) request.getSession().getAttribute(SafeOnlineAppConstants.MINIMAL_SESSION_ATTRIBUTE);

            String encodedSamlRequestToken = authenticationService.redirectRegistration(deviceRegistrationServicePath, encodedLandingUrl,
                    device, userId);

            RequestUtil.sendRequest(encodedLandingUrl, encodedSamlRequestToken, language, color, minimal, templateResourceName, response,
                    false);
        }

        catch (SafeOnlineException e) {
            throw new RuntimeException("could not initiate device registration:" + e.getMessage(), e);
        } catch (ServletException e) {
            throw new RuntimeException("could not initiate device registration: " + e.getMessage(), e);
        } catch (IOException e) {
            throw new RuntimeException("could not initiate device registration: " + e.getMessage(), e);
        }
    }

    private static String findInitParameter(HttpServletRequest request, String parameterName) {

        return request.getSession().getServletContext().getInitParameter(parameterName);

    }

    private static String getInitParameter(HttpServletRequest request, String parameterName) {

        String initParameter = findInitParameter(request, parameterName);
        if (null == initParameter)
            throw new RuntimeException("missing context-param in web.xml: " + parameterName);
        return initParameter;

    }
}
