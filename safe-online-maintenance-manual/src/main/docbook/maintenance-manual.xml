<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en">
	<bookinfo>
		<title>OLAS Maintenance Manual</title>
		<copyright>
			<year>2008</year>
			<holder>LIN-K N.V.</holder>
		</copyright>
		<date>07/08/2008</date>
		<abstract>
			<para> This document contains maintenance manual for the OLAS
				product.</para>
		</abstract>
		<releaseinfo>1.0.0</releaseinfo>
		<productname>OLAS</productname>
		<productnumber>1.0.0</productnumber>
		<authorgroup>
			<author>
				<firstname>Frank</firstname>
				<surname>Cornelis</surname>
			</author>
			<author>
				<firstname>Wim</firstname>
				<surname>Vandenhaute</surname>
			</author>
		</authorgroup>
	</bookinfo>
	<chapter id="introduction">
		<title>Introduction</title>
		<para> OLAS is an authentication, signature and user data exchange
			service. It allows 3th party web application to authenticate users,
			involve users in transactions and obtain user identity data. It
			brings to users a central identity management.</para>
	</chapter>
	<chapter id="database">
		<title>Database</title>
		<abstract>
			<para> This chapter describes the maintenance procedures for the OLAS
				database.</para>
		</abstract>
		<section>
			<title>Database backup</title>
			<para>
				Every OLAS database schema has a version number. This version number
				is located in the
				<code>METADATA</code>
				table under the table row
				<code>VERSION</code>
				. This version number will be used to detect the need for an OLAS
				database schema update by the OLAS CLI.
			</para>
			<para>
				After a first deployment of OLAS you'll notice that the JBoss AS has
				created some extra tables in the database. JBoss AS uses these
				tables as part of its JavaEE implementation. When creating a backup
				of the OLAS database also take these JBoss tables into
				consideration. These tables are:
				<code>HILOSEQUENCES</code>
				,
				<code>JMS_MESSAGES</code>
				,
				<code>JMS_ROLES</code>
				,
				<code>JMS_SUBSCRIPTIONS</code>
				,
				<code>JMS_TRANSACTIONS</code>
				,
				<code>JMS_USERS</code>
				, and
				<code>TIMERS</code>
			</para>
		</section>
		<section>
			<title>Database Recovery</title>
			<para>
				In case the OLAS JavaEE application runs out of DBMS connections the
				JBoss transaction manager will start writing database recovery files
				to:
				<code> $JBOSS_HOME/server/default/data/tx-object-store/</code>
				When rebooting the JBoss application server the JBoss transaction
				manager will try to recover via the data stored in disk files.
				<caution>
					<para> We still get an non-Serializable XAResource error. We need
						to investigate on this so that full recovery from the disk files
						is possible. Exact error message: Could not find new XAResource to
						use for recovering non-serializable XAResource</para>
				</caution>
			</para>
		</section>
	</chapter>
	<chapter id="logging">
		<title>OLAS Logging</title>
		<abstract>
			This chapter describes the logging systems built into OLAS.
		</abstract>
		<section>
			<title>User History Logging</title>
			<para>
				For each user, certain events are logged into the system. These
				events can be viewed by the user in the User webapp in the Account
				section under History. Following are the events that are currently
				persisted.
				<variablelist>
					<varlistentry>
						<term>Login</term>
						<listitem>
							User logged in successfully for a certain application with a
							certain device.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Device registration</term>
						<listitem>
							User successfully registered a new device.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Device removal</term>
						<listitem>
							User successfully removed an existing device.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Device update</term>
						<listitem>
							User successfully updated an existing device.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Subscription added</term>
						<listitem>
							User subscribed to a certain application.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Subscription removed</term>
						<listitem>
							User removed a subscription to a certain application.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Attribute added</term>
						<listitem>
							User added an attribute.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Attribute changed</term>
						<listitem>
							User modified an existing attribute.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Attribute removed</term>
						<listitem>
							User removed an existing attribute.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Attribute added by attribute provider</term>
						<listitem>
							User attribute was added by the attribute provider.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Attribute changed by attribute provider</term>
						<listitem>
							User attribute was modified by the attribute provider.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Attribute removed by attribute provider</term>
						<listitem>
							User attribute was removed by the attribute provider.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Helpdesk request</term>
						<listitem>
							User logged a helpdesk request.
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>
		<section>
			<title>Helpdesk Logging</title>
			<para> During the authentication process, various events are logged
				for the OLAS helpdesk. These events are only persisted to the
				database if the user is creating a helpdesk ticket during his
				authentication. Before that, they are stored on the HTTP session.
				This limit is configurable from the operator web application in the
				general configuration section. The helpdesk events should give the
				helpdesk a good view of the authentication flow that was used.
			</para>
		</section>
		<section>
			<title>Audit Logging</title>
			<para>
				There are 4 types of audit events that are logged.
				<variablelist>
					<varlistentry>
						<term>Access audit</term>
						<listitem>
							Audit events logging unauthorized access to certain
							business
							methods or more general exceptions thrown by them.
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Resource audit</term>
						<listitem>
							Audit events logging unavailability of certain resources OLAS
							needs ( e.g. ClockDrift, OCSP, Webservices, ... )
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Security audit</term>
						<listitem>
							Audit events logging possible misuse like authentication device
							failures, ...
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Audit audit</term>
						<listitem>
							Audit events logging problems in the audit system itself.
						</listitem>
					</varlistentry>
				</variablelist>
				Audit events are part of an audit context. This audit context gets
				pushed onto a JMS queue, where it will be processed later on by
				various audit backends. At this time only 1 audit backend is
				implemented, being a backend that writes to syslog. After all
				backends have processed the audit context, it can be sanitized if it
				does not contain important audit events. An audit cleanup task is
				also in place to cleanup audit contexts and their related events
				after a specified amount of time.
			</para>
		</section>
	</chapter>
	<chapter id="attributes">
		<title>OLAS attributes</title>
		<para> OLAS has 2 types of attributes: OLAS attributes and external
			attributes. OLAS attributes are attributes stored, maintained and
			provided by OLAS nodes. This also includes attributes provided by
			OLAS authentication devices running on OLAS nodes. External
			attributes are attributes stored, maintained and provided by OSGi
			attribute plugin bundles.</para>
		<para> Creation of attribute types is a one-time step so be sure the
			configuration is in order before starting to use it in application
			identities. During the creation process you will be asked if your
			attribute type is an OLAS attribute or an external attribute. If you
			decide it is an OLAS attribute you will have to specify on which OLAS
			node this attribute is located. If you decide it is an external
			attribute you will have to specify which OSGi attribute plugin should
			be used. Additionally you can specify a custom configuration string
			per attribute type. This configuration string is passed on to the
			attribute plugin. The configuration string can be edited afterwards,
			but the rest can only be modified if you complete remove the
			attribute type.</para>
		<para>OLAS Attributes and external attributes also have a "User
			Invisible" option. This option does not mean the attribute will be
			secret. It merely means that the attribute value makes no sense to
			the user and is therefore not shown in the user's profile, nor is the
			user asked for permission if the attribute needs to be shared.</para>
	</chapter>
</book>