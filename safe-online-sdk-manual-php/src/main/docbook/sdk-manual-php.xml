<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article PUBLIC
        "-//OASIS//DTD DocBook XML V4.5//EN"
        "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
    <articleinfo>
        <title>linkID PHP SDK Manual</title>
        <copyright>
            <year>2012</year>
            <holder>LIN-K N.V.</holder>
        </copyright>
        <date>14/03/2012</date>
        <abstract>
            <para>This document describes the use and setup of linkID SDK for PHP</para>
        </abstract>
        <releaseinfo>1.1.0</releaseinfo>
        <productname>linkID</productname>
        <productnumber>1.0.0</productnumber>
        <authorgroup>
            <author>
                <firstname>Wim</firstname>
                <surname>Vandenhaute</surname>
            </author>
        </authorgroup>
    </articleinfo>
    <section>
        <title>Introduction</title>
        <para>
            The linKID PHP SDK is using the SimpleSAMLphp library as a base.
            See <ulink url="http://simplesamlphp.org/" /> for more information.
            The version of SimpleSAMLphp this SDK is based on is <code>1.8.2</code>
            A few patches were needed on this library to work with linkID.
            The original files are placed besides the patched ones ( .orig ).
            Following files were patched:
            <itemizedlist>
                <listitem><para>lib/SAML2/Binding.php</para></listitem>
                <listitem><para>lib/SAML2/HTTPRedirect.php</para></listitem>
                <listitem><para>lib/SAML2/Assertion.php</para></listitem>
                <listitem><para>modules/saml/lib/Auth/Source/SP.php</para></listitem>
            </itemizedlist>
        </para>
        <para>
            Please note that in order for the SimpleSAMLphp library to work, you will
            need to set an alias simplesaml to simplesamlphp/www in your webserver configuration. So e.g.
            <programlisting>
                <![CDATA[
Alias /simplesaml <your-sites-path>/simplesamlphp-1.8.2/www
                        ]]>
            </programlisting>
        </para>
        <para>SAML v2.0 is a protocol that describes the means for applications to
            authenticate themselves in a standard way with external authentication
            and identity providers. This relieves the burden of identity management
            from service providers such that they can concentrate on their service
            and rest assured that user identity is managed for them in a secure
            environment. For more information on the protocol and how linkID incorporates it
            please refer to the general linkID SDK Manual.
        </para>
    </section>
    <section>
        <title>Configuration</title>
        <para>This chapter explains the minimal steps needed to setup a SP application which
            can authenticate with linkID using the SAML v2.0 protocol.
        </para>
        <section>
            <title>Setup linkID as a remote IdP (Identity Provider)</title>
            <para>
                You first have to configure linkID as a remote IdP. This is done by editing the
                <code>metadata/saml20-idp-remote.php</code> file. The SDK already provides you
                with a default setup, using the demo.linkid.be service.

                <programlisting>
                    <![CDATA[

$metadata['linkID'] = array(
       'name'                 => array(
           'en' => 'linkID',
       ),

       'SingleSignOnService' => 'https://demo.linkid.be/linkid-auth/entry',
       'SingleLogoutService' => 'https://demo.linkid.be/linkid-auth/logoutentry',

       'redirect.sign'       => true,
       'redirect.validate'   => true,
       'certificate'         => 'linkid.crt',
       'certFingerprint'     => '26FDFF87837760F71698EA9D3E859660F70B9A6C',
   );

                    ]]>
                </programlisting>

                Note that you will have to modify certificate and fingerprint to match
                the linkID service's node certificate. This certificate is used for validating
                the XML signature on incoming linkID SAML v2.0 responses.
                You can download this certificate from the linkID service @
                <code>https://demo.linkid.be/linkid-auth/pki-cert.pem</code>.
                Off course change this url to the appropriate linkID service you are using.
                The PEM encoded certificate needs to be stored in <code>cert/linkid.crt/</code>.
            </para>
        </section>

        <section>
            <title>Setup your SP (Service Provider)</title>
            <para>
                You will have to configure your application as an authentication source in the
                SDK. Do this by editing the <code>config/authsources.php</code> file.
                The SDK already provides you with an example setup.

                <programlisting>
                    <![CDATA[

        // // linkID Example authentication source
        'linkid-example' => array(
                'saml:SP',
        'privatekey' => 'example.pem',
        'certificate' => 'example.crt',
        'RelayState'  => '/www/linkid-example/index.php',

                // The entity ID of this SP.
                // Can be NULL/unset, in which case an entity ID is generated based on the metadata URL.
                'entityID' => 'linkid-example',

                // The entity ID of the IdP this should SP should contact.
                // Can be NULL/unset, in which case the user will be shown a list of available IdPs.
                'idp' => 'linkID',
        ),

                    ]]>
                </programlisting>

                Note that you will have to generate your own keypair and certificate and as the linkID operator
                to configure your application within linkID. The private key and certificate should be placed in the
                <code>cert</code> directory of the SDK and should match the <code>privatekey</code> and <code>certificate</code>
                parameters in the authentication source config. Both are pem encoded.
                The <code>idp</code> paramete should match the application name your linkID operator has given to your
                application. This value will be used as <code>Issues</code> of the SAML v2.0 AuthnRequest message.
                The <code>RelayState</code> points to the default return URL the SDK will redirect to upon successful validation
                of the linkID SAML v2.0 authentication Response.
            </para>

        </section>

   </section>

   <section>
       <title>Authentication</title>
       <para>
           This chapter explains how to initiate the linkID authentication process.
       </para>
       <para>
           The SDK contains a basic linkID SP example which you could use to start form. This example is located in
           <code>www/linkid-example</code>.
       </para>
       <para>
           If you have successfully complete the configuration of the SDK for your SP application, initiating the linkID
           authentication process is as simple as follows:

           <programlisting>
                <![CDATA[

$as = new SimpleSAML_Auth_Simple('linkid-example');

if (!$as->isAuthenticated()) {

    // initiate linkID login
    $as->login(array(
        'saml:idp' => 'linkID',
        'ReturnTo' => 'http://localhost/linkid-example/index.php'
    ));

                ]]>
           </programlisting>
           Note that the value passed to instantiating <code>SimpleSAML_Auth_Simple</code> must match the unique name you gave
           your SP (authentication source) in <code>config/authsources.php</code>.
           Also the <code>saml:idp</code> must match the unique name you gave to the linkID IdP in
           <code>metadata/saml20-idp-remote.php</code>.
           Note that in this example we explicitly say which page to redirect to upon finalizatiton of the linkID authentication
           process using the <code>ReturnTo</code> configuration parameter.
       </para>
       <para>
           It is also possible to run the linkID authentication process in a framed(modal window) or popup window mode.
           To achieve this you will first have to add the following javascript file to the page were you start the login.

           <programlisting>
                <![CDATA[

<script type="text/javascript" id="linkid-login-script" src="https://demo.linkid.be/linkid-static/js/linkid-min.js"></script>

                ]]>
           </programlisting>
           Note to change the URL to match the linKID service you are connecting to.
           Also you will have to add the <code>linkid-login</code> CSS class to the link which will start the login.

           <programlisting>
                <![CDATA[

<a href="./login.php" class="linkid-login">Login</a>

                ]]>
           </programlisting>
            As an additional step you will have to add extra HTTP Request parameters towards the linkID service, indicating which
           mode you wish to use. Do this as follows:

           <programlisting>
                <![CDATA[

            $as->login(array(
                'saml:idp' => 'linkID',
                'ReturnTo' => 'http://localhost/linkid-example/index.php'
                // This parameter is optional for running the linkID authentication process in a framed/popup mode.
                // Please refer to the linkID SDK Manual for more information on this.
                'DestinationParams' => '?login_mode=FRAMED',
                'ErrorURL' => 'http://localhost/linkid-example/error.php'
            ));

                ]]>
           </programlisting>

           The ErrorURL page is where simplesamlphp will redirect to when a failed SAML response is sent back by linkID.
           Note that a failed SAML response can just be that the user has cancelled the authentication process.
           In that case the SAML Response StatusCode URI will be urn:oasis:names:tc:SAML:2.0:status:AuthnFailed.
       </para>

   </section>

    <section>
        <title>Attributes</title>
        <para>
            This chapter explains how to access the user's authentication information upon successful linkID authentication.
        </para>
        <para>
            After the user has authentication successfully against the linkID service, linkID will send back a SAML v2.0
            authentication response to you. This Response will contain a SAML v2.0 assertion which will include the
            linkID userID of that user and the attributes of him as configured towards your SP application by the linkID
            operator.
            You can access this information in the following manner:

           <programlisting>
                <![CDATA[

if ($as->isAuthenticated()) {

    $authDataArray = $as->getAuthDataArray();
    $userId        = $authDataArray['saml:sp:NameID']['Value'];
    $attributes    = $as->getAttributes();

                ]]>
            </programlisting>

            There are 3 sorts of linkID attributes, single valued, multi valued and compound. Refer to the general SDK manual
            for more information on this.
            The SDK will return a map of the linKID attributes. You can access the single valued and multi (non-compound) valued
            attributes in the following manner:

           <programlisting>
                <![CDATA[

$attributes['attribute.test'][0]

                ]]>
           </programlisting>

            Compound attributes are a bit more complex as the value of a compound attribute is again a map of attributes.
            You can access a member of a compound attribute in the following way:

           <programlisting>
                <![CDATA[

$attributes['compound.attribute'][0]['compound.member.attribute'][0]

                ]]>
           </programlisting>
        </para>
    </section>

    <section>
        <title>SSL</title>
        <para>
            When a user has completed the linkID authentication process, linkID will post a SAML2 authentication response back to the SP.
            The SimpleSAMLphp library constructs th path to where the POST is done ( the SAML v2.0 Assertion consumer service URL )
            to something like
            <programlisting>
                <![CDATA[
            <host>/simplesaml/module.php/saml/sp/saml2-acs.php/listlist
                ]]>
            </programlisting>
            This URL is included in the SAML v2.0 authentication request that SimpleSAMLphp constructs.
            To make sure that this URL is over SSL, so the HTTP Post occurs safely over SSL, you should go to the
            "login.php" page ( where the SAML authentication process is initiated ) over SSL.
            Not doing so will result in a browser warning and moreover sending the SAML response which contains the user's ID and attributes
            unencrypted.
        </para>
    </section>

</article>
