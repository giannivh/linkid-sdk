/*
 * SafeOnline project.
 *
 * Copyright 2006-2007 Lin.k N.V. All rights reserved.
 * Lin.k N.V. proprietary/confidential. Use is subject to license terms.
 */

package net.link.safeonline.authentication;

import java.util.Locale;
import java.util.Set;

import javax.servlet.http.HttpSession;

import net.link.safeonline.entity.DeviceEntity;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


/**
 * Protocol Context class. Protocol Context objects should be generated by protocol handlers after they have successfully processed an
 * authentication request.
 * 
 * @author fcorneli
 * 
 */
public class ProtocolContext {

    public static final Log         LOG              = LogFactory.getLog(ProtocolContext.class);

    public static final String      PROTOCOL_CONTEXT = "ProtocolContext";

    private final String            target;
    private final long              applicationId;
    private final String            applicationName;
    private final String            applicationFriendlyName;
    private final Set<DeviceEntity> requiredDevices;

    private final Locale            language;
    private Integer                 color;
    private Boolean                 minimal;


    /**
     * Main constructor.
     * 
     * @param applicationId
     * @param applicationName
     *            the application name of the application that the authentication protocol handler has determined that issued the
     *            authentication request.
     * @param applicationFriendlyName
     *            the application friendly name, can be used by the remote device issuer to display what the user is authenticating for
     * @param target
     *            the target URL to which to send the authentication response.
     * @param language
     *            the (optional) language to be used by the authentication webapp
     * @param requiredDevices
     *            the optional set of required devices for this authentication session.
     */
    public ProtocolContext(long applicationId, String applicationName, String applicationFriendlyName, String target, Locale language,
                           Integer color, Boolean minimal, Set<DeviceEntity> requiredDevices) {

        this.applicationId = applicationId;
        this.applicationName = applicationName;
        this.applicationFriendlyName = applicationFriendlyName;
        this.target = target;
        this.language = language;
        this.color = color;
        this.minimal = minimal;
        this.requiredDevices = requiredDevices;

        LOG.debug("applicationId=" + this.applicationId + " applicationName=" + this.applicationName + " applicationFriendlyName="
                + this.applicationFriendlyName);
    }

    public static void setProtocolContext(ProtocolContext protocolContext, HttpSession httpSession) {

        httpSession.setAttribute(PROTOCOL_CONTEXT, protocolContext);

    }

    public static ProtocolContext getProtocolContext(HttpSession httpSession) {

        return (ProtocolContext) httpSession.getAttribute(PROTOCOL_CONTEXT);
    }

    public String getApplicationName() {

        return applicationName;
    }

    public long getApplicationId() {

        return applicationId;
    }

    public String getApplicationFriendlyName() {

        return applicationFriendlyName;
    }

    public String getTarget() {

        return target;
    }

    public Set<DeviceEntity> getRequiredDevices() {

        return requiredDevices;
    }

    public Locale getLanguage() {

        return language;
    }

    public Integer getColor() {

        return color;
    }

    public Boolean getMinimal() {

        return minimal;
    }
}
